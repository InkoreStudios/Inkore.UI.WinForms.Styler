<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iNKORE.UI.WinForms.Styler</name>
    </assembly>
    <members>
        <member name="T:iNKORE.UI.WinForms.Styler.AeroForm">
            <summary>
            Base form class that automatically sets its font according to the Windows UX guidelines.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.AeroForm.#ctor">
            <summary>
            Constructs a new Aero styled form.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Design.ControlDesignerBase`1">
            <summary>
            A base class for control designers
            </summary>
            <typeparam name="TControl">The type of the targeted control.</typeparam>
            <seealso cref="T:System.Windows.Forms.Design.ControlDesigner" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.Design.ControlDesignerBase`1.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the designer with the specified component.
            </summary>
            <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to associate the designer with. This component must always be an instance of, or derive from, <see cref="T:System.Windows.Forms.Control" />.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.Design.ControlDesignerBase`1.InitializeInternal(`0)">
            <summary>
            Initializes the control designer with the specified target control.
            </summary>
            <param name="target">The target control.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.Design.ControlDesignerBase`1.Target">
            <summary>
            Returns the <see cref="T:System.Windows.Forms.Control"/> this control designer instance is targeted at.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.Design.ControlDesignerBase`1.ActionLists">
            <summary>
            Gets the design-time action lists supported by the component associated with the designer.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.Design.ControlDesignerBase`1.ActionList">
            <summary>
            Gets or sets the primary action list of this control designer.
            </summary>
            <value>
            The action list.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.Design.ControlDesignerBase`1.MainSelectionRules">
            <summary>
            Gets or sets the selection rules that indicate the movement capabilities of a component.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.Design.ControlDesignerBase`1.SelectionRules">
            <summary>
            Gets the selection rules that indicate the movement capabilities of a component.
            </summary>
            <value>
            The selection rules.
            </value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Design.DesignerActionListBase`1">
            <summary>
            A base class for easier creation of designer action lists.
            </summary>
            <typeparam name="TControl">The type of the targeted control.</typeparam>
            <seealso cref="T:System.ComponentModel.Design.DesignerActionList" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.Design.DesignerActionListBase`1.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.Design.DesignerActionListBase`1"/> class.
            </summary>
            <param name="component">A component related to the <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</param>
            <exception cref="T:System.InvalidOperationException">The specified control is not compatible with this designer.</exception>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.Design.DesignerActionListBase`1.Control">
            <summary>
            Gets the control this designer action list is targeted at.
            </summary>
            <value>
            The target control.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.Design.DesignerActionListBase`1.CreateItem``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Dynamically creates a <see cref="T:System.ComponentModel.Design.DesignerActionPropertyItem"/> with the name, display name, category and description of the property specified by the expression.
            </summary>
            <typeparam name="TProp">The type of the property.</typeparam>
            <param name="property">The targeted property.</param>
            <returns></returns>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.Design.DesignerActionListBase`1.Items">
            <summary>
            Returns the items of this designer action list.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.Design.DesignerActionListBase`1.GetSortedActionItems">
            <summary>
            Returns the collection of <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> objects contained in the list.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> array that contains the items in this list.
            </returns>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.Design.DesignerActionListBase`1.RefreshControl">
            <summary>
            Refreshes the targeted control.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Design.NavigationButtonDesigner">
            <summary>
            Provides a ControlDesigner for the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.NavigationButton"/> Control.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.Design.NavigationButtonDesigner.InitializeInternal(iNKORE.UI.WinForms.Styler.Controls.NavigationButton)">
            <summary>
            Initializes the control designer with the specified target control.
            </summary>
            <param name="target">The target control.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Design.NavigationButtonActionList">
            <summary>
            Provides an ActionList for the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.NavigationButton"/> Control.
            </summary>
            <seealso cref="!:iNKORE.UI.WinForms.Styler.Controls.Design.DesignerActionListBase&lt;iNKORE.UI.WinForms.Styler.Controls.NavigationButton&gt;" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.Design.NavigationButtonActionList.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.Design.NavigationButtonActionList"/> class.
            </summary>
            <param name="component">A component related to the <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.Design.NavigationButtonActionList.Items">
            <summary>
            Returns the items of this designer action list.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.CommandArrow">
            <summary>
            A simple Back/Forward Button drawn by Windows via Visual Styles if available.
            </summary>
            <remarks>
            The button is drawn with Visual Styles (Navigation > BackButton/ForwardButton). If running on XP or another OS, the button is drawn manually (in a kinda-Metro-Style)
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.CommandArrow.DefaultSize">
            <summary>
            Returns the default size.
            </summary>
            <value>
            The default size.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.CommandArrow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.NavigationButton"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.CommandArrow.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Paint" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.CommandArrow.PaintWithVisualStyles(System.Drawing.Graphics)">
            <summary>
            Paints the button with visual styles.
            </summary>
            <param name="g">The targeted graphics.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.CommandArrow.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MouseEnter" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.CommandArrow.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="!:MouseLeave" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.CommandArrow.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:MouseDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.CommandArrow.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:MouseUp" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.CommandArrow.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="!:GotFocus" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.CommandArrow.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="!:LostFocus" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.CommandArrow.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="!:EnabledChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.CommandArrow.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:KeyDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.KeyEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.AdvListView.SendMessage(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message. 
            To send a message and return immediately, use the SendMessageCallback or SendNotifyMessage function. To post a message to a thread's message queue and return immediately, use the PostMessage or PostThreadMessage function.
            </summary>
            <param name="hWnd">
            [in] Handle to the window whose window procedure will receive the message. 
            If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows. 
            Microsoft Windows Vista and later. Message sending is subject to User Interface Privilege Isolation (UIPI). The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.
            </param>
            <param name="uMsg">[in] Specifies the message to be sent.</param>
            <param name="wParam">[in] Specifies additional message-specific information.</param>
            <param name="lParam">[in] Type of LVGROUP, Specifies additional message-specific information.</param>
            <returns>
            Microsoft Windows Vista and later. When a message is blocked by UIPI the last error, retrieved with GetLastError, is set to 5 (access denied).
            Applications that need to communicate using HWND_BROADCAST should use the RegisterWindowMessage function to obtain a unique message for inter-application communication.
            The system only does marshalling for system messages (those in the range 0 to (WM_USER-1)). To send other messages (those >= WM_USER) to another process, you must do custom marshalling.
            If the specified window was created by the calling thread, the window procedure is called immediately as a subroutine. If the specified window was created by a different thread, the system switches to that thread and calls the appropriate window procedure. Messages sent between threads are processed only when the receiving thread executes message retrieval code. The sending thread is blocked until the receiving thread processes the message. However, the sending thread will process incoming nonqueued messages while waiting for its message to be processed. To prevent this, use SendMessageTimeout with SMTO_BLOCK set. For more information on nonqueued messages, see Nonqueued Messages.
            Windows 95/98/Me: SendMessageW is supported by the Microsoft Layer for Unicode (MSLU). To use this, you must add certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me Systems.
            </returns>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.LVGROUP">
            <summary>
            LVGROUP StructureUsed to set and retrieve groups.
            </summary>
            <example>
            LVGROUP myLVGROUP = new LVGROUP();
            myLVGROUP.CbSize	// is of managed type uint
            myLVGROUP.Mask	// is of managed type uint
            myLVGROUP.PszHeader	// is of managed type string
            myLVGROUP.CchHeader	// is of managed type int
            myLVGROUP.PszFooter	// is of managed type string
            myLVGROUP.CchFooter	// is of managed type int
            myLVGROUP.IGroupId	// is of managed type int
            myLVGROUP.StateMask	// is of managed type uint
            myLVGROUP.State	// is of managed type uint
            myLVGROUP.UAlign	// is of managed type uint
            myLVGROUP.PszSubtitle	// is of managed type IntPtr
            myLVGROUP.CchSubtitle	// is of managed type uint
            myLVGROUP.PszTask	// is of managed type string
            myLVGROUP.CchTask	// is of managed type uint
            myLVGROUP.PszDescriptionTop	// is of managed type string
            myLVGROUP.CchDescriptionTop	// is of managed type uint
            myLVGROUP.PszDescriptionBottom	// is of managed type string
            myLVGROUP.CchDescriptionBottom	// is of managed type uint
            myLVGROUP.ITitleImage	// is of managed type int
            myLVGROUP.IExtendedImage	// is of managed type int
            myLVGROUP.IFirstItem	// is of managed type int
            myLVGROUP.CItems	// is of managed type IntPtr
            myLVGROUP.PszSubsetTitle	// is of managed type IntPtr
            myLVGROUP.CchSubsetTitle	// is of managed type IntPtr
            </example>
            <remarks>
            The LVGROUP structure was created by Paw Jershauge
            Created: Jan. 2008.
            The LVGROUP structure code is based on information from Microsoft's MSDN2 website.
            The structure is generated via an automated converter and is as is.
            The structure may or may not hold errors inside the code, so use at own risk.
            Reference url: http://msdn.microsoft.com/en-us/library/bb774769(VS.85).aspx
            </remarks>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.CbSize">
            <summary>
            Size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.Mask">
            <summary>
            Mask that specifies which members of the structure are valid input. One or more of the following values:LVGF_NONENo other items are valid.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.PszHeader">
            <summary>
            Pointer to a null-terminated string that contains the header text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the header text.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.CchHeader">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszHeader member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.PszFooter">
            <summary>
            Pointer to a null-terminated string that contains the footer text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the footer text.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.CchFooter">
            <summary>
            Size in TCHARs of the buffer pointed to by the pszFooter member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.IGroupId">
            <summary>
            ID of the group.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.StateMask">
            <summary>
            Mask used with LVM_GETGROUPINFO (Microsoft Windows XP and Windows Vista) and LVM_SETGROUPINFO (Windows Vista only) to specify which flags in the state value are being retrieved or set.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.State">
            <summary>
            Flag that can have one of the following values:LVGS_NORMALGroups are expanded, the group name is displayed, and all items in the group are displayed.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.UAlign">
            <summary>
            Indicates the alignment of the header or footer text for the group. It can have one or more of the following values. Use one of the header flags. Footer flags are optional. Windows XP: Footer flags are reserved.LVGA_FOOTER_CENTERReserved.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.PszSubtitle">
            <summary>
            Windows Vista. Pointer to a null-terminated string that contains the subtitle text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the subtitle text. This element is drawn under the header text.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.CchSubtitle">
            <summary>
            Windows Vista. Size, in TCHARs, of the buffer pointed to by the pszSubtitle member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.PszTask">
            <summary>
            Windows Vista. Pointer to a null-terminated string that contains the text for a task link when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the task text. This item is drawn right-aligned opposite the header text. When clicked by the user, the task link generates an LVN_LINKCLICK notification.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.CchTask">
            <summary>
            Windows Vista. Size in TCHARs of the buffer pointed to by the pszTask member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.PszDescriptionTop">
            <summary>
            Windows Vista. Pointer to a null-terminated string that contains the top description text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the top description text. This item is drawn opposite the title image when there is a title image, no extended image, and uAlign==LVGA_HEADER_CENTER.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.CchDescriptionTop">
            <summary>
            Windows Vista. Size in TCHARs of the buffer pointed to by the pszDescriptionTop member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.PszDescriptionBottom">
            <summary>
            Windows Vista. Pointer to a null-terminated string that contains the bottom description text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the bottom description text. This item is drawn under the top description text when there is a title image, no extended image, and uAlign==LVGA_HEADER_CENTER.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.CchDescriptionBottom">
            <summary>
            Windows Vista. Size in TCHARs of the buffer pointed to by the pszDescriptionBottom member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.ITitleImage">
            <summary>
            Windows Vista. Index of the title image in the control imagelist.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.IExtendedImage">
            <summary>
            Windows Vista. Index of the extended image in the control imagelist.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.IFirstItem">
            <summary>
            Windows Vista. Read-only.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.CItems">
            <summary>
            Windows Vista. Read-only in non-owner data mode.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.PszSubsetTitle">
            <summary>
            Windows Vista. NULL if group is not a subset. Pointer to a null-terminated string that contains the subset title text when item information is being set. If group information is being retrieved, this member specifies the address of the buffer that receives the subset title text.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LVGROUP.CchSubsetTitle">
            <summary>
            Windows Vista. Size in TCHARs of the buffer pointed to by the pszSubsetTitle member. If the structure is not receiving information about a group, this member is ignored.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.ListViewGroupState.Normal">
            <summary>
            Groups are expanded, the group name is displayed, and all items in the group are displayed.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.ListViewGroupState.Collapsed">
            <summary>
            The group is collapsed.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.ListViewGroupState.Hidden">
            <summary>
            The group is hidden.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.ListViewGroupState.NoHeader">
            <summary>
            Version 6.00 and Windows Vista. The group does not display a header.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.ListViewGroupState.Collapsible">
            <summary>
            Version 6.00 and Windows Vista. The group can be collapsed.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.ListViewGroupState.Focused">
            <summary>
            Version 6.00 and Windows Vista. The group has keyboard focus.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.ListViewGroupState.Selected">
            <summary>
            Version 6.00 and Windows Vista. The group is selected.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.ListViewGroupState.SubSeted">
            <summary>
            Version 6.00 and Windows Vista. The group displays only a portion of its items.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.ListViewGroupState.SubSetLinkFocused">
            <summary>
            Version 6.00 and Windows Vista. The subset link of the group has keyboard focus.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabControl">
            <summary>
            A TabControl-style control that does not have headers.
            </summary>
            <remarks>
            Instead of using the usual approach (suppressing the TCM_ADJUSTRECT message), I redid the TabControl completely to eliminate any bugs and to make it work on every platform.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabControl"/> class.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabControl.TabPages">
            <summary>
            Returns the collection of tab pages in this tab control.
            </summary>
            <value>
            The tab pages.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabControl.OnTabPageCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the tab page collection has been changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabControl.UpdateTabPage">
            <summary>
            Gets or sets the update tab page.
            </summary>
            <value>
            The update tab page.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabControl.SelectedIndex">
            <summary>
            Gets the index of the selected tab.
            </summary>
            <value>
            The index of the selected tab.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabControl.SelectedTab">
            <summary>
            Returns the selected tab.
            </summary>
            <value>
            The selected tab.
            </value>
            <exception cref="T:System.Exception">SelectedIndex returned an invalid index.</exception>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabControl.HeaderlessTabControlDesigner">
            <summary>
            Extends the design mode behaviour of a <see cref="T:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabControl"/>.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabControl.HeaderlessTabControlDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the designer with the specified component.
            </summary>
            <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to associate with the designer.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabPage">
            <summary>
            A tab page for the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabControl"/>.
            </summary>
            <remarks>
            It is essentially just a Panel.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabPage.Anchor">
            <summary>
            <para>This property had to be disabled due to it not being usable.</para>
            <para>Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.</para>
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabPage.Dock">
            <summary>
            <para>This property had to be disabled due to it not being usable.</para>
            <para>Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.</para>
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabPage.Enabled">
            <summary>
            <para>This property had to be disabled due to it not being usable.</para>
            <para>Gets or sets a value indicating whether the control can respond to user interaction.</para>
            </summary>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
              <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabPage.Location">
            <summary>
            <para>This property had to be disabled due to it not being usable.</para>
            <para>Gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</para>
            </summary>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
              <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.HeaderlessTabPage.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
            <exception cref="T:System.InvalidOperationException">A HeaderlessTabPage cannot be put in anything other than a HeaderlessTabControl.</exception>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Rebar.BandCollection">
            <summary>
            Summary description for BandCollection.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Rebar.BandCollectionEditor">
            <summary>
            Summary description for BandCollectionEditor.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Rebar.BandDesigner">
            <summary>
            Summary description for BandDesigner.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Rebar.GripperSettings">
            <summary>
            Summary description for BandWrapper.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Rebar.RebarDesigner">
            <summary>
            Summary description for RebarDesigner.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Rebar.RebarWrapper">
            <summary>
            Summary description for UserControl1.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.Rebar.RebarWrapper._imageList">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.Rebar.RebarWrapper.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.Rebar.RebarWrapper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Rebar.Utilities.ComCtl32Dll">
            <summary>
            Summary description for ComCtl32Dll.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Rebar.Utilities.Gdi32Dll">
            <summary>
            Summary description for Gdi32Dll.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Rebar.Utilities.Kernel32Dll">
            <summary>
            Summary description for Kernel32Dll.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Rebar.Utilities.User32Dll">
            <summary>
            Summary description for User32Dll.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.StylePanel">
            <summary>
            A horizontal panel which resembles what is used for information and navigation in the Control Panel of Windows 7 and Vista.  
            </summary>
            <remarks>
            This control is meant to be used on the left hand side of a form, it creates a graphic border on the right hand side.  Also
            I have VB code for this control if anyone needs it, just send me an e-mail at bpell@indiana.edu or blakepell@hotmail.com.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.StylePanel.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            We are by default setting the background color to Color.Transparent.  The reason for this is that a lot of controls that will
            be used with this, namingly the Label and LinkLabel default their back color to the color of the panel and for those controls
            to display properly on this panel, their BackColor will need to be Color.Transparent (otherwise, they'll display as a black
            box).  This should help to isolate the developer from having to research this.
            
            To reduce flicker, especially when glass is enabled, I had to set all three of the below styles.
            
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.StylePanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The actual painting of the background of our control.
            </summary>
            <param name="e"></param>
            <remarks>
            The colors in use here were extracted from an image of the Control Panel taken from a Windows 7 RC1 installation.
            </remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.DragDropSign">
            <summary>
            A simple Back/Forward Button drawn by Windows via Visual Styles if available.
            </summary>
            <remarks>
            The button is drawn with Visual Styles (Navigation > BackButton/ForwardButton). If running on XP or another OS, the button is drawn manually (in a kinda-Metro-Style)
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.DragDropSign.DefaultSize">
            <summary>
            Returns the default size.
            </summary>
            <value>
            The default size.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.DragDropSign.Style">
            <summary>
            Indicates the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.DragDropSign.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.NavigationButton"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.DragDropSign.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Paint" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.DragDropSign.PaintWithVisualStyles(System.Drawing.Graphics)">
            <summary>
            Paints the button with visual styles.
            </summary>
            <param name="g">The targeted graphics.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.DragDropSign.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="!:EnabledChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.WindowFrame.WindowPart">
            <summary>
            Indicates the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.WindowFrame.IsActive">
            <summary>
            Indicates the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.NavigationButton"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowFrame.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Paint" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowFrame.PaintWithVisualStyles(System.Drawing.Graphics)">
            <summary>
            Paints the button with visual styles.
            </summary>
            <param name="g">The targeted graphics.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton">
            <summary>
            A simple Back/Forward Button drawn by Windows via Visual Styles if available.
            </summary>
            <remarks>
            The button is drawn with Visual Styles (Navigation > BackButton/ForwardButton). If running on XP or another OS, the button is drawn manually (in a kinda-Metro-Style)
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.DefaultSize">
            <summary>
            Returns the default size.
            </summary>
            <value>
            The default size.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.Style">
            <summary>
            Indicates the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.NavigationButton"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Paint" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.PaintWithVisualStyles(System.Drawing.Graphics)">
            <summary>
            Paints the button with visual styles.
            </summary>
            <param name="g">The targeted graphics.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MouseEnter" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="!:MouseLeave" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:MouseDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:MouseUp" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="!:GotFocus" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="!:LostFocus" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="!:EnabledChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.WindowControlButton.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:KeyDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.KeyEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton">
            <summary>
            A simple Back/Forward Button drawn by Windows via Visual Styles if available.
            </summary>
            <remarks>
            The button is drawn with Visual Styles (Navigation > BackButton/ForwardButton). If running on XP or another OS, the button is drawn manually (in a kinda-Metro-Style)
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.DefaultSize">
            <summary>
            Returns the default size.
            </summary>
            <value>
            The default size.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.Action">
            <summary>
            Indicates the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.NavigationButton"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Paint" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.PaintWithVisualStyles(System.Drawing.Graphics)">
            <summary>
            Paints the button with visual styles.
            </summary>
            <param name="g">The targeted graphics.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MouseEnter" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="!:MouseLeave" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:MouseDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:MouseUp" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="!:GotFocus" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="!:LostFocus" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="!:EnabledChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.TooltipBoxButton.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:KeyDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.KeyEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.NavigationButton">
            <summary>
            A simple Back/Forward Button drawn by Windows via Visual Styles if available.
            </summary>
            <remarks>
            The button is drawn with Visual Styles (Navigation > BackButton/ForwardButton). If running on XP or another OS, the button is drawn manually (in a kinda-Metro-Style)
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.DefaultSize">
            <summary>
            Returns the default size.
            </summary>
            <value>
            The default size.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.Type">
            <summary>
            Indicates the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.NavigationButton"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Paint" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.PaintWithVisualStyles(System.Drawing.Graphics)">
            <summary>
            Paints the button with visual styles.
            </summary>
            <param name="g">The targeted graphics.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.PaintManually(System.Drawing.Graphics)">
            <summary>
            Paints the button manually.
            </summary>
            <param name="g">The targeted graphics.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MouseEnter" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="!:MouseLeave" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:MouseDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="!:MouseUp" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="!:GotFocus" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="!:LostFocus" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="!:EnabledChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.NavigationButton.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:KeyDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.KeyEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.NavigationButtonType">
            <summary>
            The Type of a <see cref="T:iNKORE.UI.WinForms.Styler.Controls.NavigationButton"/>.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.NavigationButtonType.Back">
            <summary>
            Represents a backward button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.NavigationButtonType.Forward">
            <summary>
            Represents a forward button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.NavigationButtonType.DropDown">
            <summary>
            Represents a drop down button.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.RadioButtonGroup">
            <summary>
            A list of radio buttons based on a collection of objects for easy creation of radio button groups.
            </summary>
            <remarks>
            Basically a FlowLayoutPanel that flows "TopDown" with a radio button for every entry in the input list.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.RadioButtonGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.RadioButtonGroup"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.RadioButtonGroup.OnResize(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Resize" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.RadioButtonGroup.FlatStyle">
            <summary>
            Gets or sets the flat style.
            </summary>
            <value>
            The flat style.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.RadioButtonGroup.RadioButtonContainer">
            <summary>
            Gets the RadioButton container.
            </summary>
            <value>
            The RadioButton container.
            </value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Seperator">
            <summary>
            A seperator line.
            </summary>
            <remarks>
            The line is drawn with Visual Styles (TaskDialog > FootnoteSeperator). If running on XP or another OS, the line is drawn manually.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.Seperator.DefaultSize">
            <summary>
            Returns the default size.
            </summary>
            <value>
            The default size.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.Seperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.Seperator"/> class.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.Seperator.Text">
            <summary>
            Hidden because the property is not used
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.Seperator.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Paint" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.Seperator.SeperatorDesigner">
            <summary>
            Provides a ControlDesigner for the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.Seperator"/> Control.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.Seperator.SeperatorDesigner.SelectionRules">
            <summary>
            Returns selection rules for the <see cref="T:iNKORE.UI.WinForms.Styler.Controls.Seperator"/> Control.
            </summary>
            <value>
            The selection rules.
            </value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.TabStrip">
            <summary>
            Represents a TabStrip control
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TabStrip.Renderer">
            <summary>
            Gets custom renderer for TabStrip. Set operation has no effect
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TabStrip.LayoutStyle">
            <summary>
            Gets or sets layout style for TabStrip control
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TabStrip.RenderMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TabStrip.RenderStyle">
            <summary>
            Gets or sets render style for TabStrip, use it instead of 
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TabStrip.UseVisualStyles">
            <summary>
            Gets or sets if control should use system visual styles for painting items
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TabStrip.FlipButtons">
            <summary>
            Gets or sets if TabButtons should be drawn flipped
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TabStrip.SelectedTab">
            <summary>
            Gets or sets currently selected tab
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.TabStripRenderer">
            <summary>
            Represents a renderer class for TabStrip control
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TabStripRenderer.RenderMode">
            <summary>
            Gets or sets render mode for this renderer
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TabStripRenderer.Mirrored">
            <summary>
            Gets or sets whether to mirror background
            </summary>
            <remarks>Use false for left and top positions, true for right and bottom</remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TabStripRenderer.UseVS">
            <summary>
            Returns if visual styles should be applied for drawing
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.TabStripButton">
            <summary>
            Represents a TabButton for TabStrip control
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.TabStripButton.IsSelected">
            <summary>
            Gets or sets if this TabButton is currently selected
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.AdvTabControl">
            <summary>
            This class supports rendering of TabControl correctly when using bottom alignment with a visual
            style enabled. When it is disabled, the default method of rendering is used.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.AdvTabControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VSControls.UxTabControl" /> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.AdvTabControl.InitializeDrawMode">
            <summary>
            Turns custom drawing on/off and sets native font for the control (it's required for tabs to
            adjust their size correctly). If one doesn't install native font manually then Windows will
            install an ugly system font for the control.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.AdvTabControl.DrawCustomTabControl(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws our tab control.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object used to draw the tab control.</param>
            <param name="clipRect">The <see cref="T:System.Drawing.Rectangle"/> that specifies the clipping rectangle
            of the control.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.AdvTabControl.DrawTabItem(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle,System.Windows.Forms.VisualStyles.VisualStyleRenderer)">
            <summary>
            Draws a single tab.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object used to draw the tab control.</param>
            <param name="index">An index of the tab being drawn.</param>
            <param name="tabRect">A <see cref="T:System.Drawing.Rectangle"/> object specifying tab's bounds.</param>
            <param name="rend">A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleRenderer"/> object for rendering the tab.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.AdvTabControl.GetImageByIndexOrKey(System.Int32,System.String)">
            <summary>
            This function attempts to get a tab image by index first, or, if not set, then by key.
            </summary>
            <param name="index">An index of tab image in tab control image list.</param>
            <param name="key">A key of tab image in tab control image list.</param>
            <returns><see cref="T:System.Drawing.Image"/> that represents image of the tab or null, if not set.</returns>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.AdvTabControl.HitTest">
            <summary>
            Gets hot tab index.
            </summary>
            <returns>Index of the tab over that the mouse is hovering or -1 if the mouse isn't over any tab.</returns>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.AdvTabControl.NativeUpDown">
            <summary>
            This class represents low level hook to updown control used to scroll tabs. We need it to know the
            position of scroller and to draw hot tab as normal when the mouse moves from that tab to scroller.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.AdvTabControl.NativeUpDown.X">
            <summary>
            Reports about current position of tab scroller.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.HorizontalPanel">
            <summary>
            A horizontal panel which resembles what is used for information and navigation in the Control Panel of Windows 7 and Vista.  
            </summary>
            <remarks>
            This control is meant to be used on the left hand side of a form, it creates a graphic border on the right hand side.  Also
            I have VB code for this control if anyone needs it, just send me an e-mail at bpell@indiana.edu or blakepell@hotmail.com.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.HorizontalPanel.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            We are by default setting the background color to Color.Transparent.  The reason for this is that a lot of controls that will
            be used with this, namingly the Label and LinkLabel default their back color to the color of the panel and for those controls
            to display properly on this panel, their BackColor will need to be Color.Transparent (otherwise, they'll display as a black
            box).  This should help to isolate the developer from having to research this.
            
            To reduce flicker, especially when glass is enabled, I had to set all three of the below styles.
            
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.HorizontalPanel.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            When a control is added, we will check the type and if it meets certain criteria will change some default behaviors of
            the control so that it fits our theme by default.  The developer can still change this as they desire after it's added.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.HorizontalPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The actual painting of the background of our control.
            </summary>
            <param name="e"></param>
            <remarks>
            The colors in use here were extracted from an image of the Control Panel taken from a Windows 7 RC1 installation.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.HorizontalPanel.RedrawControlAsBitmap(System.IntPtr)">
            <summary>
            This procedure will redraw any control, given it's handl as an image on the form.  This is necessary if you want to lay this
            control on top of the glass surface of an Aero form.
            </summary>
            <param name="hwnd"></param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.HorizontalPanel.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Handles incoming Windows Messages.
            </summary>
            <param name="m"></param>
            <remarks>
            On the paint event and if the RenderOnGlass is set to true, we will redraw the control as an image directly on
            the form.  This has a little extra overhead but also provides the ability to lay this control directly on the
            glass and have it rendered correctly.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.HorizontalPanel.RenderOnGlass">
            <summary>
            Whether or not the control needs to be rendered on the Glass surface.
            </summary>
            <remarks>
            This is false by default, it should only be toggled to true if the control needs to lay directly on
            the glass surface of the form.
            </remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.LabeledDivider">
            <summary>
            The labeled divider provides a Aero styled divider with an optional caption,
            similiar to what is seen in the Control Panel dialogs of Windows 7 and Vista.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.LabeledDivider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.LabeledDivider.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The actual painting of the background of our control.
            </summary>
            <param name="e"></param>
            <remarks>
            The colors in use here were extracted from an image of the Control Panel taken from a Windows 7 RC1 installation.
            </remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.LabeledDivider.DividerPositions">
            <summary>
            The positions that the divider line can be drawn in
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LabeledDivider.DividerPositions.Center">
            <summary>
            The divider will be centered after the text caption and will begin drawing after the string.  This is the default behavior.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Controls.LabeledDivider.DividerPositions.Below">
            <summary>
            The divider will be drawn below the text caption.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.LabeledDivider.DividerPosition">
            <summary>
            The position of the divider line.
            </summary>
            <remarks>
            The default value is the center position which is consistent on how this type of divider has been used throughout the Windows
            7 and Vista UI's.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.LabeledDivider.DividerColor">
            <summary>
            The color of the divider line.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.LabeledDivider.Text">
            <summary>
            The text that should be used for the caption.  If the caption is set to blank and the divider position is set to center then
            a simple divider line will be drawn.
            </summary>
            <remarks>
            After a change is made to the text property we want to invalidate the control so it triggers a new paint message being sent.
            </remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox">
            <summary>A standard WinForms text box presenting the common Vista "search" interface.
            Reacts on user input by raising "SearchStarted" events.</summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.TextChanged">
            <summary>
            Raised when the Text of the search box has changed.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.SearchStarted">
            <summary>
            Raised after an interval after the last user input.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.SearchCancelled">
            <summary>
            Raised when the user clicks on the X to cancel the search.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.HoverButtonColor">
            <summary>Gets or sets the background Color of the button when the mouse hovers on it.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.ActiveForeColor">
            <summary>Gets or sets the ForeColor of the control when the search box is active.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.ActiveBackColor">
            <summary>Gets or sets the BackColor of the control when the search box is active.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.InactiveForeColor">
            <summary>Gets or sets the ForeColor of the control when the search box is inactive.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.InactiveBackColor">
            <summary>Gets or sets the BackColor of the control when the search box is inactive.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.ForeColor">
            <summary>Temporary ForeColor property of the control. You should use InactiveForeColor and ActiveForeColor instead.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.BackColor">
            <summary>Temporary BackColor property of the control. You should use InactiveBackColor and ActiveBackColor instead.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.InactiveText">
            <summary>Gets or sets the text that is shown on top of the text box when the user hasn't entered any text.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.ActiveFont">
            <summary>Gets or sets the font used in the search text box.</summary>
            <remarks>Equals to the Font property.</remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.InactiveFont">
            <summary>Gets or sets the font used to write the "inactivity label" on top of the control when the user hasn't entered any text.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.Font">
            <summary>
            Overall Font property of the control.
            Property changes are forwarded to the ActiveFont and InactiveFont property.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.TextEntered">
            <summary>Returns true if the user entered some text in the search textbox.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.SearchTimer">
            <summary>
            Gets or sets the delay in milliseconds between when the text is edited
            and the search event is raised.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.StartSearchAfterDelay">
            <summary>
            Gets or sets whether the control raises a SearchStarted event after user input.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.StartSearchOnEnter">
            <summary>
            Gets or sets whether the control raises a SearchStarted event when the user hits the Enter key.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.SetFocusWithoutSelection">
            <summary>Puts the focus on the text box and moves the caret to the end of the text, without selecting it.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.SearchTextBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Controls.SplitButton.SplitClick">
            <summary>Occurs when the split label is clicked.</summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Controls.SplitButton.SplitMenuOpening">
            <summary>Occurs when the split label is clicked, but before the associated
            context menu is displayed by the control.</summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.SplitButton.SplitMenuEventArgs">
            <summary>Provides data for the clicking of split buttons and the opening
            of context menus.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SplitButton.SplitMenuEventArgs.DrawArea">
            <summary>Represents the bounding box of the clicked button.</summary>
            <remarks>A menu should be opened, with top-left coordinates in the left-bottom point of
            the rectangle and with width equal (or greater) than the width of the rectangle.</remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SplitButton.SplitMenuEventArgs.PreventOpening">
            <summary>Set to true if you want to prevent the menu from opening.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SplitButton.SplitMenuStrip">
            <summary>Gets or sets the associated context menu that is displayed when the split
            glyph of the button is clicked.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.SplitButton.SplitMenu">
            <summary>Gets or sets the associated context menu that is displayed when the split
            glyph of the button is clicked. Exposed for backward compatibility.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.AdvTextBox.CueBannerText">
            <summary>Gets or sets the cue text that is displayed on the TextBox control.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.AdvTextBox.ShowCueFocused">
            <summary>Gets or sets whether the Cue text should be displyed even when the control has keybord focus.</summary>
            <remarks>If true, the Cue text will disappear as soon as the user starts typing.</remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Controls.VerticalPanel">
            <summary>
            A vertical panel which resembles what is used for information and navigation in the Control Panel of Windows 7 and Vista.  
            </summary>
            <remarks>
            This control is meant to be used on the left hand side of a form, it creates a graphic border on the right hand side.  Also
            I have VB code for this control if anyone needs it, just send me an e-mail at bpell@indiana.edu or blakepell@hotmail.com.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.VerticalPanel.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
            We are by default setting the background color to Color.Transparent.  The reason for this is that a lot of controls that will
            be used with this, namingly the Label and LinkLabel default their back color to the color of the panel and for those controls
            to display properly on this panel, their BackColor will need to be Color.Transparent (otherwise, they'll display as a black
            box).  This should help to isolate the developer from having to research this.
            
            To reduce flicker, especially when glass is enabled, I had to set all three of the below styles.
            
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.VerticalPanel.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            When a control is added, we will check the type and if it meets certain criteria will change some default behaviors of
            the control so that it fits our theme by default.  The developer can still change this as they desire after it's added.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.VerticalPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The actual painting of the background of our control.
            </summary>
            <param name="e"></param>
            <remarks>
            The colors in use here were extracted from an image of the Control Panel taken from a Windows 7 RC1 installation.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.VerticalPanel.RedrawControlAsBitmap(System.IntPtr)">
            <summary>
            This procedure will redraw any control, given it's handl as an image on the form.  This is necessary if you want to lay this
            control on top of the glass surface of an Aero form.
            </summary>
            <param name="hwnd"></param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Controls.VerticalPanel.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Handles incoming Windows Messages.
            </summary>
            <param name="m"></param>
            <remarks>
            On the paint event and if the RenderOnGlass is set to true, we will redraw the control as an image directly on
            the form.  This has a little extra overhead but also provides the ability to lay this control directly on the
            glass and have it rendered correctly.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Controls.VerticalPanel.RenderOnGlass">
            <summary>
            Whether or not the control needs to be rendered on the Glass surface.
            </summary>
            <remarks>
            This is false by default, it should only be toggled to true if the control needs to lay directly on
            the glass surface of the form.
            </remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.GenericExtensions">
            <summary>
            Provides some generic extension methods applicable to most objects.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.GenericExtensions.Do``1(``0,System.Action{``0})">
            <summary>
            Executes a specified action on an object and then returns the object.
            </summary>
            <typeparam name="T">The type of the specified object.</typeparam>
            <param name="target">The target.</param>
            <param name="action">The action.</param>
            <returns>The specified object.</returns>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.GenericExtensions.DoIf``1(``0,System.Func{System.Boolean},System.Action{``0})">
            <summary>
            Executes a specified action on an object if a specified condition is fulfilled and then returns the object.
            </summary>
            <typeparam name="T">The type of the specified object.</typeparam>
            <param name="target">The target.</param>
            <param name="condition">The condition.</param>
            <param name="action">The action.</param>
            <returns>The specified object.</returns>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.GenericExtensions.DoIf``1(``0,System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            Executes a specified action on an object if a specified condition is fulfilled and then returns the object.
            </summary>
            <typeparam name="T">The type of the specified object.</typeparam>
            <param name="target">The target.</param>
            <param name="condition">The condition.</param>
            <param name="action">The action.</param>
            <returns>The specified object.</returns>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.GenericExtensions.Modify``2(``0,System.Func{``0,``1})">
            <summary>
            Modifies the specified object by passing it to the specified method and then returns the result.
            </summary>
            <typeparam name="TIn">The type of the specified object.</typeparam>
            <typeparam name="TOut">The type of the object returned by the specified method.</typeparam>
            <param name="target">The target.</param>
            <param name="func">The function.</param>
            <returns>The object returned by the specified method.</returns>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.GenericExtensions.ModifyIf``1(``0,System.Func{System.Boolean},System.Func{``0,``0})">
            <summary>
            Modifies the specified object by passing it to the specified method if a specified condition is fulfilled and then returns the result.
            </summary>
            <typeparam name="T">The type of the specified object.</typeparam>
            <typeparam name="TOut">The type of the object returned by the specified method.</typeparam>
            <param name="target">The target.</param>
            <param name="condition">The condition.</param>
            <param name="func">The function.</param>
            <returns>The object returned by the specified method or the original object depending on whether the condition was fulfilled.</returns>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.ToolStripAeroRenderer">
            <summary>Renders a toolstrip using the UxTheme API via VisualStyleRenderer and a specific style.</summary>
            <remarks>Perhaps surprisingly, this does not need to be disposable.</remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.ToolStripAeroRenderer.NativeMethods">
            <summary>
            It shouldn't be necessary to P/Invoke like this, however VisualStyleRenderer.GetMargins
            misses out a parameter in its own P/Invoke.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.AdditionalVisualStyleElements">
            <summary>
            Contains classes that provide additional visual style elements not available through the regular
            <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> class.
            </summary>
            <threadsafety instance="false" static="false" />
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.AdditionalVisualStyleElements.TextStyle">
            <summary>
            Provides <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> objects for
            text styles.
            </summary>
            <remarks>
            <note>
              Use of these styles requires Windows Vista or a newer version of Windows.
            </note>
            </remarks>
            <threadsafety instance="false" static="false" />
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdditionalVisualStyleElements.TextStyle.MainInstruction">
            <summary>
            Gets a visual style element that represents the main instruction in a dialog box.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> representing the style for the main instruction.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdditionalVisualStyleElements.TextStyle.BodyText">
            <summary>
            Gets a visual style element that represents the body text in a dialog box.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> representing the style for the body text.
            </value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.AdditionalVisualStyleElements.TaskDialog">
            <summary>
            Provides <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> objects
            for task dialog related elements.
            </summary>
            <remarks>
            <note>
              Use of these styles requires Windows Vista or a newer version of Windows.
            </note>
            </remarks>
            <threadsafety instance="false" static="false" />
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdditionalVisualStyleElements.TaskDialog.PrimaryPanel">
            <summary>
            Gets a visual style element that represents the primary panel of a task dialog.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> representing the style for the primary panel.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdditionalVisualStyleElements.TaskDialog.SecondaryPanel">
            <summary>
            Gets a visual style element that represents the secondary panel of a task dialog.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> representing the style for the secondary panel.
            </value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.AnimationResource">
            <summary>
            Represents an animation for the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog"/> loaded from a Win32 resource.
            </summary>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AnimationResource.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.AnimationResource"/> class.
            </summary>
            <param name="resourceFile">The file containing the animation resource.</param>
            <param name="resourceId">The resource ID of the animation resource.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourceFile"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AnimationResource.ResourceFile">
            <summary>
            Gets the name of the file containing the animation resource.
            </summary>
            <value>
            The name of the file containing the animation resource. This is typically a DLL or EXE file.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AnimationResource.ResourceId">
            <summary>
            Gets the ID of the animation resource.
            </summary>
            <value>
            The ID of the animation resource.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AnimationResource.GetShellAnimation(iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation)">
            <summary>
            Gets a default animation from shell32.dll.
            </summary>
            <param name="animation">The animation to get.</param>
            <returns>An instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.AnimationResource"/> class representing the specified animation.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="animation"/> parameter was not a value defined in the
            <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation"/> enumeration.</exception>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.ButtonType">
            <summary>
            Represents the type of a task dialog button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ButtonType.Custom">
            <summary>
            The button is a custom button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ButtonType.Ok">
            <summary>
            The button is the common OK button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ButtonType.Yes">
            <summary>
            The button is the common Yes button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ButtonType.No">
            <summary>
            The button is the common No button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ButtonType.Cancel">
            <summary>
            The button is the common Cancel button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ButtonType.Retry">
            <summary>
            The button is the common Retry button.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ButtonType.Close">
            <summary>
            The button is the common Close button.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog">
            <summary>
            Represents a dialog box that allows the user to enter generic credentials.
            </summary>
            <remarks>
            <para>
              This class is meant for generic credentials; it does not provide access to all the functionality
              of the Windows CredUI API. Features such as Windows domain credentials or alternative security
              providers (e.g. smartcards or biometric devices) are not supported.
            </para>
            <para>
              The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog"/> class provides methods for storing and retrieving credentials,
              and also manages automatic persistence of credentials by using the "Save password" checkbox on
              the credentials dialog. To specify the target for which the credentials should be saved, set the
              <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Target"/> property.
            </para>
            <note>
              This class requires Windows XP or later.
            </note>
            </remarks>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.UserNameChanged">
            <summary>
            Event raised when the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.UserName"/> property changes.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.PasswordChanged">
            <summary>
            Event raised when the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Password"/> property changes.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog"/> class with the specified container.
            </summary>
            <param name="container">The <see cref="T:System.ComponentModel.IContainer"/> to add the component to.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.UseApplicationInstanceCredentialCache">
            <summary>
            Gets or sets whether to use the application instance credential cache.
            </summary>
            <value>
            <see langword="true" /> when credentials are saved in the application instance cache; <see langref="false" /> if they are not.
            The default value is <see langword="false" />.
            </value>
            <remarks>
            <para>
              The application instance credential cache stores credentials in memory while an application is running. When the
              application exits, this cache is not persisted.
            </para>
            <para>
              When the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.UseApplicationInstanceCredentialCache"/> property is set to <see langword="true"/>, credentials that
              are confirmed with <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ConfirmCredentials(System.Boolean)"/> when the user checked the "save password" option will be stored
              in the application instance cache as well as the operating system credential store.
            </para>
            <para>
              When <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowDialog"/> is called, and credentials for the specified <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Target"/> are already present in
              the application instance cache, the dialog will not be shown and the cached credentials are returned, even if
              <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/> is <see langword="true"/>.
            </para>
            <para>
              The application instance credential cache allows you to prevent prompting the user again for the lifetime of the
              application if the "save password" checkbox was checked, but when the application is restarted you can prompt again
              (initializing the dialog with the saved credentials). To get this behaviour, the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/>
              property must be set to <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.IsSaveChecked">
            <summary>
            Gets or sets whether the "save password" checkbox is checked.
            </summary>
            <value>
            <see langword="true" /> if the "save password" is checked; otherwise, <see langword="false" />.
            The default value is <see langword="false" />.
            </value>
            <remarks>
            The value of this property is only valid if the dialog box is displayed with a save checkbox.
            Set this property before showing the dialog to determine the initial checked value of the save checkbox.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Password">
            <summary>
            Gets the password the user entered in the dialog.
            </summary>
            <value>
            The password entered in the password field of the credentials dialog.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Credentials">
            <summary>
            Gets the user-specified user name and password in a <see cref="T:System.Net.NetworkCredential"/> object.
            </summary>
            <value>
            A <see cref="T:System.Net.NetworkCredential"/> instance containing the user name and password specified on the dialog.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.UserName">
            <summary>
            Gets the user name the user entered in the dialog.
            </summary>
            <value>
            The user name entered in the user name field of the credentials dialog.
            The default value is an empty string ("").
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Target">
            <summary>
            Gets or sets the target for the credentials, typically a server name.
            </summary>
            <value>
            The target for the credentials. The default value is an empty string ("").
            </value>
            <remarks>
            Credentials are stored on a per user, not on a per application basis. To ensure that credentials stored by different 
            applications do not conflict, you should prefix the target with an application-specific identifer, e.g. 
            "Company_Application_target".
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.WindowTitle">
            <summary>
            Gets or sets the title of the credentials dialog.
            </summary>
            <value>
            The title of the credentials dialog. The default value is an empty string ("").
            </value>
            <remarks>
            <para>
              This property is not used on Windows Vista and newer versions of windows; the window title will always be "Windows Security"
              in that case.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.MainInstruction">
            <summary>
            Gets or sets a brief message to display in the dialog box.
            </summary>
            <value>
            A brief message that will be displayed in the dialog box. The default value is an empty string ("").
            </value>
            <remarks>
            <para>
              On Windows Vista and newer versions of Windows, this text is displayed using a different style to set it apart
              from the other text. In the default style, this text is a slightly larger and colored blue. The style is identical
              to the main instruction of a task dialog.
            </para>
            <para>
              On Windows XP, this text is not distinguished from other text. It's display mode depends on the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.DownlevelTextMode"/>
              property.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Content">
            <summary>
            Gets or sets additional text to display in the dialog.
            </summary>
            <value>
            Additional text to display in the dialog. The default value is an empty string ("").
            </value>
            <remarks>
            <para>
              On Windows Vista and newer versions of Windows, this text is placed below the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.MainInstruction"/> text.
            </para>
            <para>
              On Windows XP, how and if this text is displayed depends on the value of the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.DownlevelTextMode"/>
              property.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.DownlevelTextMode">
            <summary>
            Gets or sets a value that indicates how the text of the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.MainInstruction"/> and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Content"/> properties
            is displayed on Windows XP.
            </summary>
            <value>
            One of the values of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.DownlevelTextMode"/> enumeration. The default value is
            <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.DownlevelTextMode.MainInstructionAndContent"/>.
            </value>
            <remarks>
            <para>
              Windows XP does not support the distinct visual style of the main instruction, so there is no visual difference between the
              text of the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.MainInstruction"/> and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Content"/> properties. Depending
              on your requirements, you may wish to hide either the main instruction or the content text.
            </para>
            <para>
              This property has no effect on Windows Vista and newer versions of Windows.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowSaveCheckBox">
            <summary>
            Gets or sets a value that indicates whether a check box is shown on the dialog that allows the user to choose whether to save
            the credentials or not.
            </summary>
            <value>
            <see langword="true" /> when the "save password" checkbox is shown on the credentials dialog; otherwise, <see langword="false"/>.
            The default value is <see langword="false" />.
            </value>
            <remarks>
            When this property is set to <see langword="true" />, you must call the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ConfirmCredentials(System.Boolean)"/> method to save the
            credentials. When this property is set to <see langword="false" />, the credentials will never be saved, and you should not call
            the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ConfirmCredentials(System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowUIForSavedCredentials">
            <summary>
            Gets or sets a value that indicates whether the dialog should be displayed even when saved credentials exist for the 
            specified target.
            </summary>
            <value>
            <see langword="true" /> if the dialog is displayed even when saved credentials exist; otherwise, <see langword="false" />.
            The default value is <see langword="false" />.
            </value>
            <remarks>
            <para>
              This property applies only when the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowSaveCheckBox"/> property is <see langword="true" />.
            </para>
            <para>
              Note that even if this property is <see langword="true" />, if the proper credentials exist in the 
              application instance credentials cache the dialog will not be displayed.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.IsStoredCredential">
            <summary>
            Gets a value that indicates whether the current credentials were retrieved from a credential store.
            </summary>
            <value>
            <see langword="true"/> if the current credentials returned by the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.UserName"/>, <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Password"/>,
            and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Credentials"/> properties were retrieved from either the application instance credential cache
            or the operating system's credential store; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
              You can use this property to determine if the credentials dialog was shown after a call to <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowDialog"/>.
              If the dialog was shown, this property will be <see langword="false"/>; if the credentials were retrieved from the
              application instance cache or the credential store and the dialog was not shown it will be <see langword="true"/>.
            </para>
            <para>
              If the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/> property is set to <see langword="true"/>, and the dialog is shown
              but populated with stored credentials, this property will still return <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowDialog">
            <summary>
            Shows the credentials dialog as a modal dialog.
            </summary>
            <returns><see cref="F:System.Windows.Forms.DialogResult.OK" /> if the user clicked OK; otherwise, <see cref="F:System.Windows.Forms.DialogResult.Cancel" />.</returns>
            <remarks>
            <para>
              The credentials dialog will not be shown if one of the following conditions holds:
            </para>
            <list type="bullet">
              <item>
                <description>
                  <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.UseApplicationInstanceCredentialCache"/> is <see langword="true"/> and the application instance
                  credential cache contains credentials for the specified <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Target"/>, even if <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/>
                  is <see langword="true"/>.
                </description>
              </item>
              <item>
                <description>
                  <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowSaveCheckBox"/> is <see langword="true"/>, <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/> is <see langword="false"/>, and the operating system credential store
                  for the current user contains credentials for the specified <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Target"/>.
                </description>
              </item>
            </list>
            <para>
              In these cases, the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Credentials"/>, <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.UserName"/> and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Password"/> properties will
              be set to the saved credentials and this function returns immediately, returning <see cref="F:System.Windows.Forms.DialogResult.OK"/>.
            </para>
            <para>
              If the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowSaveCheckBox"/> property is <see langword="true"/>, you should call <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ConfirmCredentials(System.Boolean)"/>
              after validating if the provided credentials are correct.
            </para>
            </remarks>
            <exception cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException">An error occurred while showing the credentials dialog.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Target"/> is an empty string ("").</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the credentials dialog as a modal dialog with the specified owner.
            </summary>
            <param name="owner">The <see cref="T:System.Windows.Forms.IWin32Window"/> that owns the credentials dialog.</param>
            <returns><see cref="F:System.Windows.Forms.DialogResult.OK" /> if the user clicked OK; otherwise, <see cref="F:System.Windows.Forms.DialogResult.Cancel" />.</returns>
            <remarks>
            <para>
              The credentials dialog will not be shown if one of the following conditions holds:
            </para>
            <list type="bullet">
              <item>
                <description>
                  <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.UseApplicationInstanceCredentialCache"/> is <see langword="true"/> and the application instance
                  credential cache contains credentials for the specified <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Target"/>, even if <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/>
                  is <see langword="true"/>.
                </description>
              </item>
              <item>
                <description>
                  <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowSaveCheckBox"/> is <see langword="true"/>, <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowUIForSavedCredentials"/> is <see langword="false"/>, and the operating system credential store
                  for the current user contains credentials for the specified <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Target"/>.
                </description>
              </item>
            </list>
            <para>
              In these cases, the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Credentials"/>, <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.UserName"/> and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Password"/> properties will
              be set to the saved credentials and this function returns immediately, returning <see cref="F:System.Windows.Forms.DialogResult.OK"/>.
            </para>
            <para>
              If the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowSaveCheckBox"/> property is <see langword="true"/>, you should call <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ConfirmCredentials(System.Boolean)"/>
              after validating if the provided credentials are correct.
            </para>
            </remarks>
            <exception cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException">An error occurred while showing the credentials dialog.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Target"/> is an empty string ("").</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ConfirmCredentials(System.Boolean)">
            <summary>
            Confirms the validity of the credential provided by the user.
            </summary>
            <param name="confirm"><see langword="true" /> if the credentials that were specified on the dialog are valid; otherwise, <see langword="false" />.</param>
            <remarks>
            Call this function after calling <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowDialog" /> when <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowSaveCheckBox"/> is <see langword="true" />.
            Only when this function is called with <paramref name="confirm"/> set to <see langword="true" /> will the credentials be
            saved in the credentials store and/or the application instance credential cache.
            </remarks>
            <exception cref="T:System.InvalidOperationException"><see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowDialog"/> was not called, or the user did not click OK, or <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.ShowSaveCheckBox"/> was <see langword="false" />
            at the call, or the value of <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Target"/> or <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.IsSaveChecked"/>
            was changed after the call.</exception>
            <exception cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException">There was an error saving the credentials.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.StoreCredential(System.String,System.Net.NetworkCredential)">
            <summary>
            Stores the specified credentials in the operating system's credential store for the currently logged on user.
            </summary>
            <param name="target">The target name for the credentials.</param>
            <param name="credential">The credentials to store.</param>
            <exception cref="T:System.ArgumentNullException">
            <para>
              <paramref name="target"/> is <see langword="null" />.
            </para>
            <para>
              -or-
            </para>
            <para>
              <paramref name="credential"/> is <see langword="null" />.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="target"/> is an empty string ("").</exception>
            <exception cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException">An error occurred storing the credentials.</exception>
            <remarks>
            <note>
              The <see cref="P:System.Net.NetworkCredential.Domain"/> property is ignored and will not be stored, even if it is
              not <see langword="null" />.
            </note>
            <para>
              If the credential manager already contains credentials for the specified <paramref name="target"/>, they
              will be overwritten; this can even overwrite credentials that were stored by another application. Therefore 
              it is strongly recommended that you prefix the target name to ensure uniqueness, e.g. using the
              form "Company_ApplicationName_www.example.com".
            </para>
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.RetrieveCredential(System.String)">
            <summary>
            Retrieves credentials for the specified target from the operating system's credential store for the current user.
            </summary>
            <param name="target">The target name for the credentials.</param>
            <returns>The credentials if they were found; otherwise, <see langword="null" />.</returns>
            <remarks>
            <para>
              If the requested credential was not originally stored using the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog"/> class (but e.g. by 
              another application), the password may not be decoded correctly.
            </para>
            <para>
              This function does not check the application instance credential cache for the credentials; for that you can use
              the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.RetrieveCredentialFromApplicationInstanceCache(System.String)"/> function.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="target"/> is an empty string ("").</exception>
            <exception cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException">An error occurred retrieving the credentials.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.RetrieveCredentialFromApplicationInstanceCache(System.String)">
            <summary>
            Tries to get the credentials for the specified target from the application instance credential cache.
            </summary>
            <param name="target">The target for the credentials, typically a server name.</param>
            <returns>The credentials that were found in the application instance cache; otherwise, <see langword="null" />.</returns>
            <remarks>
            <para>
              This function will only check the the application instance credential cache; the operating system's credential store
              is not checked. To retrieve credentials from the operating system's store, use <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.RetrieveCredential(System.String)"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="target"/> is an empty string ("").</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.DeleteCredential(System.String)">
            <summary>
            Deletes the credentials for the specified target.
            </summary>
            <param name="target">The name of the target for which to delete the credentials.</param>
            <returns><see langword="true"/> if the credential was deleted from either the application instance cache or
            the operating system's store; <see langword="false"/> if no credentials for the specified target could be found
            in either store.</returns>
            <remarks>
            <para>
              The credentials for the specified target will be removed from the application instance credential cache
              and the operating system's credential store.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="target"/> is an empty string ("").</exception>
            <exception cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException">An error occurred deleting the credentials from the operating system's credential store.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.OnUserNameChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.UserNameChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> containing data for the event.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.OnPasswordChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.PasswordChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> containing data for the event.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException">
            <summary>
            The exception that is thrown when an error occurs getting credentials.
            </summary>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException" /> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException" /> class with the specified error. 
            </summary>
            <param name="error">The Win32 error code associated with this exception.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException" /> class with the specified error and the specified detailed description.
            </summary>
            <param name="error">The Win32 error code associated with this exception.</param>
            <param name="message">A detailed description of the error.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">A reference to the inner exception that is the cause of the current exception.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.CredentialException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.DownlevelTextMode">
            <summary>
            An enumeration that displays how the text in the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.MainInstruction"/> and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Content"/>
            properties is displayed on a credential dialog in Windows XP.
            </summary>
            <remarks>
            <para>
              Windows XP does not support the distinct visual style of the main instruction, so there is no visual difference between the
              text of the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.MainInstruction"/> and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Content"/> properties. Depending
              on the scenario, you may wish to hide either the main instruction or the content text.
            </para>
            </remarks>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.DownlevelTextMode.MainInstructionAndContent">
            <summary>
            The text of the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.MainInstruction"/> and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Content"/> properties is
            concatenated together, separated by an empty line.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.DownlevelTextMode.MainInstructionOnly">
            <summary>
            Only the text of the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.MainInstruction"/> property is shown.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.DownlevelTextMode.ContentOnly">
            <summary>
            Only the text of the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.CredentialDialog.Content"/> property is shown.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.ExpandButtonClickedEventArgs">
            <summary>
            Provides data for the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandButtonClicked"/> event.
            </summary>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ExpandButtonClickedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ExpandButtonClickedEventArgs"/> class with the specified expanded state.
            </summary>
            <param name="expanded"><see langword="true" /> if the the expanded content on the dialog is shown; otherwise, <see langword="false" />.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ExpandButtonClickedEventArgs.Expanded">
            <summary>
            Gets a value that indicates if the expanded content on the dialog is shown.
            </summary>
            <value><see langword="true" /> if the expanded content on the dialog is shown; otherwise, <see langword="false" />.</value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm">
            <summary>
            Base class for windows forms with extended functionality.
            </summary>
            <remarks>
            <para>
                In order to use this class, create a new Form in Visual Studio, then modify the base
                class in the .cs (or in Visual Basic, the .Designer.vb) file for the form to this class.
            </para>
            <para>
                This class provides two main pieces of functionality: the ability to use the system font
                and the ability to use client area glass in Windows Vista.
            </para>
            <para>
                Windows Forms applications will normally always use MS Sans Serif 8pt, even when the
                system font is something else. For example, on Windows XP (English), the system font
                is Tahoma 8pt. On Windows XP Japanese, the system font is MS UI Gothic 8pt. On Windows
                Vista it is Segoe UI 9pt. By setting the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.UseSystemFont"/> property to <see langword="true" /> for a form,
                that form will automatically use the proper system font.
            </para>
            <para>
                Because the font metrics of these different fonts can be vary greatly
                (especially on Vista which uses a larger font), please make sure the 
                <see cref="P:System.Windows.Forms.ContainerControl.AutoScaleMode" /> property is set to
                <see cref="F:System.Windows.Forms.AutoScaleMode.Font"/>, and make special provisions for resizing
                graphics and other elements.
                Please note that some system fonts (such as MS UI Gothic) can also be smaller than MS Sans Serif
                which means the form will be scaled down, not up.
            </para>
            <note>
                If you set <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.UseSystemFont"/> to <see langword="true" />, it is strongly recommended you
                test your application with various different font and DPI settings.
            </note>
            <para>
                To use glass with your form, use the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.GlassMargin"/> property. You can also
                specify whether it's possible to drag the form by its glass areas using the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.AllowGlassDragging"/>
                property. Glass requires Windows Vista with the Desktop Window Manager enabled. The glass related
                properties have no effect on other operating systems.
            </para>
            <note>
                Many Windows Forms controls will not display correctly when placed over a glass area. Use the 
                <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.Glass.DrawCompositedText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Windows.Forms.Padding,System.Drawing.Color,System.Int32,System.Windows.Forms.TextFormatFlags)"/> method to display text on a glass area.
            </note>
            <para>
                This class will automatically handle changes in the system font or DWM settings (including enabling/disabling
                of the DWM) while the application is running.
            </para>
            </remarks>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.DwmCompositionChanged">
            <summary>
            Raised when Desktop Window Manager (DWM) composition has been enabled or disabled.
            </summary>
            <remarks>
            <note>
              This event is only raised on Windows Vista or later.
            </note>
            <para>
              Use the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.Glass.IsDwmCompositionEnabled"/> property to determine the
              current composition state.
            </para>
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm" /> class.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.UseSystemFont">
            <summary>
            Gets or sets a value that indicates whether or not the form automatically uses the system default font.
            </summary>
            <value>
            <see langword="true" /> when the form's font is automatically adjusted to the system font; 
            otherwise, <see langword="false" />. The default value is <see langword="false" />.
            </value>
            <remarks>
            <para>
              This property has no effect at design time; the font settings will only be applied at
              run time.
            </para>
            <para>
              When this property is set to <see langword="true" />, the form will use the configured 
              system font and font size automatically, e.g. it will use Segoe UI on Windows Vista and 
              Tahoma on Windows XP. Please make sure the <see cref="P:System.Windows.Forms.ContainerControl.AutoScaleMode" /> 
              property is set to <see cref="F:System.Windows.Forms.AutoScaleMode.Font"/> 
              to account for the different metrics of the various fonts, and make special provisions 
              to scale graphics and other element. Note that the system font can also be smaller than
              the font you used at design time, causing the form to be scaled down. For example the font
              MS Gothic UI, used on Japanese versions of Windows (pre-Vista), has smaller metrics than
              MS Sans Serif.
            </para>
            <note>
              It is strongly recommended to test your application with different font and DPI settings if you set this property
              to <see langword="true" />.
            </note>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.GlassMargin">
            <summary>
            Gets or sets the glass margins of the form.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.Padding"/> that indicates the glass margins of the form. The default value is
            <see cref="F:System.Windows.Forms.Padding.Empty"/>.
            </value>
            <remarks>
            <note>
              Client-area glass requires Windows Vista or later with the Desktop Window Manager enabled. If the Desktop
              Window Manager is not enabled, or an older version of Windows is used, this property is ignored.
            </note>
            <para>
              Client-area glass extends the glass frame used by the Windows Vista Aero user interface into the client
              area of your window.
            </para>
            <para>
              Use negative margins to create the "sheet of glass" effect where the client area is rendered 
              as a completely glass surface.
            </para>
            <para>
              Text rendered with the <see cref="T:System.Windows.Forms.TextRenderer" /> will not display correctly on the glass area (this includes
              text drawn by most controls). To draw text on the glass area, use <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.Glass.DrawCompositedText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Windows.Forms.Padding,System.Drawing.Color,System.Int32,System.Windows.Forms.TextFormatFlags)"/>.
            </para>
            <para>
              If the form is scaled, which can happen for instance if <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.UseSystemFont"/> is <see langword="true" />,
              the glass margin will also be scaled.
            </para>
            <para>
              At design time, the glass area will be indicated by a pattern drawn onto the form. This pattern will not
              be visible at runtime regardless of whether the glass is enabled or not.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.AllowGlassDragging">
            <summary>
            Gets or sets a value that indicates whether the form can be dragged by the glass areas inside the client area.
            </summary>
            <value>
            <see langword="true" /> when the form can be dragged using the client area glass; otherwise, <see langword="false" />.
            The default value is <see langword="false" />.
            </value>
            <remarks>
            This property has no effect on operating systems older than Windows Vista, when the Desktop Window Manager is disabled
            or when the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.GlassMargin" /> property is set to zero.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.OnDwmCompositionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.DwmCompositionChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> containing the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.OnLoad(System.EventArgs)">
            <summary>
            Overrides the <see cref="M:System.Windows.Forms.Form.OnLoad(System.EventArgs)"/> method.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.OnFormClosed(System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            Overrides the <see cref="M:System.Windows.Forms.Form.OnFormClosed(System.Windows.Forms.FormClosedEventArgs)"/> method.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.FormClosedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="pevent">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.OnResize(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Form.OnResize(System.EventArgs)" />.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.OnHandleCreated(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Form.OnHandleCreated(System.EventArgs)" />.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Form.WndProc(System.Windows.Forms.Message@)" />.
            </summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Form.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />.
            </summary>
            <param name="factor">The height and width of the control's bounds.</param>
            <param name="specified">A <see cref="T:System.Windows.Forms.BoundsSpecified" /> value that specifies the bounds of the control to use when defining its size and position.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.Glass">
            <summary>
            Provides functionality to use Aero Glass.
            </summary>
            <remarks>
            <para>
              This class provides functionality to extend the Windows Vista Aero glass window frame into a window's
              client area, and to draw text on the glass area.
            </para>
            <para>
              The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm"/> class provides more comprehensive support for client area glass than
              using <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.Glass.ExtendFrameIntoClientArea(System.Windows.Forms.IWin32Window,System.Windows.Forms.Padding)" /> by using its <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.GlassMargin"/> property. 
              In addition to the basic client area glass support, <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm"/> will also
              respond to changes in the Desktop Window Manager state and enable/disable client area glass as necessary. It also
              allows the window to be dragged using the client area glass areas using the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ExtendedForm.AllowGlassDragging"/>
              property.
            </para>
            <note>
              Use of glass requires Windows Vista or later with the Desktop Window Manager enabled.
            </note>
            </remarks>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Glass.OSSupportsDwmComposition">
            <summary>
            Gets a value that indicates whether the operating system supports composition through the Desktop Window Manager.
            </summary>
            <value>
            <see langword="true" /> on operating systems that support the Desktop Window Manager (Windows Vista and higher); otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Glass.IsDwmCompositionEnabled">
            <summary>
            Gets a value that indicates whether desktop composition is enabled.
            </summary>
            <value>
            <see langword="true" /> when desktop composition is supported and enabled; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.Glass.ExtendFrameIntoClientArea(System.Windows.Forms.IWin32Window,System.Windows.Forms.Padding)">
            <summary>
            Extends the glass window frame into the client area of the specified window.
            </summary>
            <param name="window">The <see cref="T:System.Windows.Forms.IWin32Window"/> on which to enable client area glass.</param>
            <param name="glassMargin">The the margins to use when extending the frame into the client area.</param>
            <remarks>
            <para>
              Use negative margins to create the "sheet of glass" effect where the client area is rendered 
              as a completely glass surface.
            </para>
            <para>
              The glass area must be filled with either a black brush or the <see cref="P:System.Windows.Forms.Form.TransparencyKey" /> color
              in order to display correctly. If the <see cref="P:System.Windows.Forms.Form.TransparencyKey"/> method is used, clicks in the
              glass area will "fall through" the window to the window below it. If the black brush method is used, text
              rendered with the <see cref="T:System.Windows.Forms.TextRenderer" /> will not display correctly on the glass area (this includes
              text drawn by most controls). To draw text on the glass area, use <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.Glass.DrawCompositedText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Windows.Forms.Padding,System.Drawing.Color,System.Int32,System.Windows.Forms.TextFormatFlags)"/>.
            </para>
            <para>
              This method needs to be called again if the state of the Desktop Window Manager is toggled.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="window"/> is <see langword="null" />.</exception>
            <exception cref="T:System.NotSupportedException">The current operating system does not support glass, or the Desktop Window Manager is not enabled.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.Glass.DrawCompositedText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Windows.Forms.Padding,System.Drawing.Color,System.Int32,System.Windows.Forms.TextFormatFlags)">
            <summary>
            Draws composited text onto the glass area of a form.
            </summary>
            <param name="dc">The <see cref="T:System.Drawing.IDeviceContext"/> onto which the composited text should be drawn.</param>
            <param name="text">The text to draw.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to apply to the drawn text.</param>
            <param name="bounds">The <see cref="T:System.Drawing.Rectangle" /> that represents the bounds of the text.</param>
            <param name="padding">The <see cref="T:System.Windows.Forms.Padding"/> around the text; necessary to allow space for the glow effect.</param>
            <param name="foreColor">The <see cref="T:System.Drawing.Color" /> to apply to the drawn text.</param>
            <param name="textFormat">A bitwise combination of the <see cref="T:System.Windows.Forms.TextFormatFlags" /> values.</param>
            <param name="glowSize">Specifies the size of a glow that will be drawn on the background prior to any text being drawn.</param>
            <remarks>
            <para>
              Do not use this method to draw text on non-glass areas of a form.
            </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">The current operating system does not support glass, or the Desktop Window Manager is not enabled.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="dc"/>, <paramref name="text"/> or <paramref name="font"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.Glass.MeasureCompositedText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags)">
            <summary>
            Provides the size, in pixels, of the specified text.
            </summary>
            <param name="dc">The device context in which to measure the text.</param>
            <param name="text">The text to measure.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to apply to the measured text.</param>
            <param name="textFormat">A bitwise combination of the <see cref="T:System.Windows.Forms.TextFormatFlags" /> values.</param>
            <returns>The <see cref="T:System.Drawing.Size"/>, in pixels, of <paramref name="text"/> drawn with the specified <paramref name="font"/> and format.</returns>
            <exception cref="T:System.NotSupportedException">The current operating system does not support glass, or the Desktop Window Manager is not enabled.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="dc"/>, <paramref name="text"/> or <paramref name="font"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.HyperlinkClickedEventArgs">
            <summary>
            Class that provides data for the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.HyperlinkClicked"/> event.
            </summary>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.HyperlinkClickedEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.HyperlinkClickedEventArgs"/> class with the specified URL.
            </summary>
            <param name="href">The URL of the hyperlink.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.HyperlinkClickedEventArgs.Href">
            <summary>
            Gets the URL of the hyperlink that was clicked.
            </summary>
            <value>
            The value of the href attribute of the hyperlink.
            </value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.OkButtonClickedEventArgs">
            <summary>
            Provides data for the <see cref="!:InputDialog.OkButtonClicked"/> event.
            </summary>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.OkButtonClickedEventArgs.#ctor(System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.OkButtonClickedEventArgs"/> class with the specified input text
            and input box window.
            </summary>
            <param name="input">The current value of the input field on the dialog.</param>
            <param name="inputBoxWindow">The input box window.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.OkButtonClickedEventArgs.Input">
            <summary>
            Gets the current value of the input field on the dialog.
            </summary>
            <value>
            The current value of the input field on the dialog.
            </value>
            <remarks>
            The <see cref="!:InputDialog.Input"/> property will not be updated until the dialog has been closed,
            so this property can be used to determine the value entered by the user when this event is raised.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.OkButtonClickedEventArgs.InputBoxWindow">
            <summary>
            Gets the input box window.
            </summary>
            <value>
            The <see cref="T:System.Windows.Forms.IWin32Window"/> for the input box window.
            </value>
            <remarks>
            You can use this property if you need to display a modal dialog (for example to alert the user if the current input value
            is invalid) and you want the input box to be the parent of that dialog.
            </remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarState">
            <summary>
            Represents the state of the progress bar on the task dialog.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarState.Normal">
            <summary>
            Normal state.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarState.Error">
            <summary>
            Error state
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarState.Paused">
            <summary>
            Paused state
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle">
            <summary>
            Indicates the type of progress on a task dialog.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.None">
            <summary>
            No progress bar is displayed on the dialog.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.ProgressBar">
            <summary>
            A regular progress bar is displayed on the dialog.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.MarqueeProgressBar">
            <summary>
            A marquee progress bar is displayed on the dialog. Use this value for operations
            that cannot report concrete progress information.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog">
            <summary>
            Represents a dialog that can be used to report progress to the user.
            </summary>
            <remarks>
            <para>
              This class provides a wrapper for the native Windows IProgressDialog API.
            </para>
            <para>
              The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog"/> class requires Windows 2000, Windows Me, or newer versions of Windows.
            </para>
            </remarks>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork">
            <summary>
            Event raised when the dialog is displayed.
            </summary>
            <remarks>
            Use this event to perform the operation that the dialog is showing the progress for.
            This event will be raised on a different thread than the UI thread.
            </remarks>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.RunWorkerCompleted">
            <summary>
            Event raised when the operation completes.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ProgressChanged">
            <summary>
            Event raised when <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ReportProgress(System.Int32,System.String,System.String,System.Object)"/> is called.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog"/> class, adding it to the specified container.
            </summary>
            <param name="container">The <see cref="T:System.ComponentModel.IContainer"/> to which the component should be added.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.WindowTitle">
            <summary>
            Gets or sets the text in the progress dialog's title bar.
            </summary>
            <value>
            The text in the progress dialog's title bar. The default value is an empty string.
            </value>
            <remarks>
            <para>
              This property must be set before <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowDialog"/> or <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Show"/> is called. Changing property has
              no effect while the dialog is being displayed.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Text">
            <summary>
            Gets or sets a short description of the operation being carried out.
            </summary>
            <value>
            A short description of the operation being carried. The default value is an empty string.
            </value>
            <remarks>
            <para>
              This is the primary message to the user.
            </para>
            <para>
              This property can be changed while the dialog is running, but may only be changed from the thread which
              created the progress dialog. The recommended method to change this value while the dialog is running
              is to use the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ReportProgress(System.Int32,System.String,System.String)"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.UseCompactPathsForText">
            <summary>
            Gets or sets a value that indicates whether path strings in the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Text"/> property should be compacted if
            they are too large to fit on one line.
            </summary>
            <value>
            <see langword="true"/> to compact path strings if they are too large to fit on one line; otherwise,
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <note>
              This property requires Windows Vista or later. On older versions of Windows, it has no effect.
            </note>
            <para>
              This property can be changed while the dialog is running, but may only be changed from the thread which
              created the progress dialog.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Description">
            <summary>
            Gets or sets additional details about the operation being carried out.
            </summary>
            <value>
            Additional details about the operation being carried out. The default value is an empty string.
            </value>
            <remarks>
            This text is used to provide additional details beyond the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Text"/> property.
            </remarks>
            <remarks>
            <para>
              This property can be changed while the dialog is running, but may only be changed from the thread which
              created the progress dialog. The recommended method to change this value while the dialog is running
              is to use the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ReportProgress(System.Int32,System.String,System.String)"/> method.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.UseCompactPathsForDescription">
            <summary>
            Gets or sets a value that indicates whether path strings in the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Description"/> property should be compacted if
            they are too large to fit on one line.
            </summary>
            <value>
            <see langword="true"/> to compact path strings if they are too large to fit on one line; otherwise,
            <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            <note>
              This property requires Windows Vista or later. On older versions of Windows, it has no effect.
            </note>
            <para>
              This property can be changed while the dialog is running, but may only be changed from the thread which
              created the progress dialog.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.CancellationText">
            <summary>
            Gets or sets the text that will be shown after the Cancel button is pressed.
            </summary>
            <value>
            The text that will be shown after the Cancel button is pressed.
            </value>
            <remarks>
            <para>
              This property must be set before <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowDialog"/> or <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Show"/> is called. Changing property has
              no effect while the dialog is being displayed.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowTimeRemaining">
            <summary>
            Gets or sets a value that indicates whether an estimate of the remaining time will be shown.
            </summary>
            <value>
            <see langword="true"/> if an estimate of remaining time will be shown; otherwise, <see langword="false"/>. The
            default value is <see langword="false"/>.
            </value>
            <remarks>
            <para>
              This property must be set before <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowDialog"/> or <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Show"/> is called. Changing property has
              no effect while the dialog is being displayed.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowCancelButton">
            <summary>
            Gets or sets a value that indicates whether the dialog has a cancel button.
            </summary>
            <value>
            <see langword="true"/> if the dialog has a cancel button; otherwise, <see langword="false"/>. The default
            value is <see langword="true"/>.
            </value>
            <remarks>
            <note>
              This property requires Windows Vista or later; on older versions of Windows, the cancel button will always
              be displayed.
            </note>
            <para>
              The event handler for the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event must periodically check the value of the
              <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.CancellationPending"/> property to see if the operation has been cancelled if this
              property is <see langword="true"/>.
            </para>
            <para>
              Setting this property to <see langword="false"/> is not recommended unless absolutely necessary.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.MinimizeBox">
            <summary>
            Gets or sets a value that indicates whether the progress dialog has a minimize button.
            </summary>
            <value>
            <see langword="true"/> if the dialog has a minimize button; otherwise, <see langword="false"/>. The default
            value is <see langword="true"/>.
            </value>
            <remarks>
            <note>
              This property has no effect on modal dialogs (which do not have a minimize button). It only applies
              to modeless dialogs shown by using the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Show"/> method.
            </note>
            <para>
              This property must be set before <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Show"/> is called. Changing property has
              no effect while the dialog is being displayed.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.CancellationPending">
            <summary>
            Gets a value indicating whether the user has requested cancellation of the operation.
            </summary>
            <value>
            <see langword="true" /> if the user has cancelled the progress dialog; otherwise, <see langword="false" />. The default is <see langword="false" />.
            </value>
            <remarks>
            The event handler for the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event must periodically check this property and abort the operation
            if it returns <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Animation">
            <summary>
            Gets or sets the animation to show on the progress dialog.
            </summary>
            <value>
            An instance of <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.AnimationResource"/> which specifies the animation to show, or <see langword="null"/>
            to show no animation. The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
              This property has no effect on Windows Vista or later. On Windows XP, this property will default to
              a flying papers animation.
            </para>
            <para>
              This property must be set before <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowDialog"/> or <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Show"/> is called. Changing property has
              no effect while the dialog is being displayed.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ProgressBarStyle">
            <summary>
            Gets or sets a value that indicates whether a regular or marquee style progress bar should be used.
            </summary>
            <value>
            One of the values of <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle"/>. 
            The default value is <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.ProgressBar"/>.
            </value>
            <remarks>
            <note>
              Operating systems older than Windows Vista do not support marquee progress bars on the progress dialog. On those operating systems, the
              progress bar will be hidden completely if this property is <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.MarqueeProgressBar"/>.
            </note>
            <para>
              When this property is set to <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.ProgressBar" />, use the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ReportProgress(System.Int32)"/> method to set
              the value of the progress bar. When this property is set to <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.MarqueeProgressBar"/>
              you can still use the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ReportProgress(System.Int32,System.String,System.String)"/> method to update the text of the dialog,
              but the percentage will be ignored.
            </para>
            <para>
              This property must be set before <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowDialog"/> or <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Show"/> is called. Changing property has
              no effect while the dialog is being displayed.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.IsBusy">
            <summary>
            Gets a value that indicates whether the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog"/> is running an asynchronous operation.
            </summary>
            <value>
            <see langword="true"/> if the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog"/> is running an asynchronous operation; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Show">
            <summary>
            Displays the progress dialog as a modeless dialog.
            </summary>
            <remarks>
            <para>
              This function will not block the parent window and will return immediately.
            </para>
            <para>
              Although this function returns immediately, you cannot use the UI thread to do any processing. The dialog
              will not function correctly unless the UI thread continues to handle window messages, so that thread may
              not be blocked by some other activity. All processing related to the progress dialog must be done in
              the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event handler.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The animation specified in the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Animation"/> property
            could not be loaded.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Show(System.Object)">
            <summary>
            Displays the progress dialog as a modeless dialog.
            </summary>
            <param name="argument">A parameter for use by the background operation to be executed in the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event handler.</param>
            <remarks>
            <para>
              This function will not block the parent window and return immediately.
            </para>
            <para>
              Although this function returns immediately, you cannot use the UI thread to do any processing. The dialog
              will not function correctly unless the UI thread continues to handle window messages, so that thread may
              not be blocked by some other activity. All processing related to the progress dialog must be done in
              the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event handler.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The animation specified in the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Animation"/> property
            could not be loaded.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowDialog">
            <summary>
            Displays the progress dialog as a modal dialog.
            </summary>
            <remarks>
            <para>
              The ShowDialog function for most .Net dialogs will not return until the dialog is closed. However,
              the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowDialog"/> function for the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog"/> class will return immediately.
              The parent window will be disabled as with all modal dialogs.
            </para>
            <para>
              Although this function returns immediately, you cannot use the UI thread to do any processing. The dialog
              will not function correctly unless the UI thread continues to handle window messages, so that thread may
              not be blocked by some other activity. All processing related to the progress dialog must be done in
              the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event handler.
            </para>
            <para>
              The progress dialog's window will appear in the taskbar. This behaviour is also contrary to most .Net dialogs,
              but is part of the underlying native progress dialog API so cannot be avoided.
            </para>
            <para>
              When possible, it is recommended that you use a modeless dialog using the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Show"/> function.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The animation specified in the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Animation"/> property
            could not be loaded.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the progress dialog as a modal dialog.
            </summary>
            <param name="owner">The window that owns the dialog.</param>
            <remarks>
            <para>
              The ShowDialog function for most .Net dialogs will not return until the dialog is closed. However,
              the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowDialog"/> function for the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog"/> class will return immediately.
              The parent window will be disabled as with all modal dialogs.
            </para>
            <para>
              Although this function returns immediately, you cannot use the UI thread to do any processing. The dialog
              will not function correctly unless the UI thread continues to handle window messages, so that thread may
              not be blocked by some other activity. All processing related to the progress dialog must be done in
              the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event handler.
            </para>
            <para>
              The progress dialog's window will appear in the taskbar. This behaviour is also contrary to most .Net dialogs,
              but is part of the underlying native progress dialog API so cannot be avoided.
            </para>
            <para>
              When possible, it is recommended that you use a modeless dialog using the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Show"/> function.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The animation specified in the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Animation"/> property
            could not be loaded, or the operation is already running.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowDialog(System.Windows.Forms.IWin32Window,System.Object)">
            <summary>
            Displays the progress dialog as a modal dialog.
            </summary>
            <param name="owner">The window that owns the dialog.</param>
            <param name="argument">A parameter for use by the background operation to be executed in the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event handler.</param>
            <remarks>
            <para>
              The ShowDialog function for most .Net dialogs will not return until the dialog is closed. However,
              the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ShowDialog"/> function for the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog"/> class will return immediately.
              The parent window will be disabled as with all modal dialogs.
            </para>
            <para>
              Although this function returns immediately, you cannot use the UI thread to do any processing. The dialog
              will not function correctly unless the UI thread continues to handle window messages, so that thread may
              not be blocked by some other activity. All processing related to the progress dialog must be done in
              the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event handler.
            </para>
            <para>
              The progress dialog's window will appear in the taskbar. This behaviour is also contrary to most .Net dialogs,
              but is part of the underlying native progress dialog API so cannot be avoided.
            </para>
            <para>
              When possible, it is recommended that you use a modeless dialog using the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Show"/> function.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The animation specified in the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.Animation"/> property
            could not be loaded, or the operation is already running.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ReportProgress(System.Int32)">
            <summary>
            Updates the dialog's progress bar.
            </summary>
            <param name="percentProgress">The percentage, from 0 to 100, of the operation that is complete.</param>
            <remarks>
            <para>
              Call this method from the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event handler if you want to report progress.
            </para>
            <para>
              This method has no effect is <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ProgressBarStyle"/> is <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.MarqueeProgressBar"/>
              or <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.None"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="percentProgress"/> is out of range.</exception>
            <exception cref="T:System.InvalidOperationException">The progress dialog is not currently being displayed.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ReportProgress(System.Int32,System.String,System.String)">
            <summary>
            Updates the dialog's progress bar.
            </summary>
            <param name="percentProgress">The percentage, from 0 to 100, of the operation that is complete.</param>
            <param name="text">The new value of the progress dialog's primary text message, or <see langword="null"/> to leave the value unchanged.</param>
            <param name="description">The new value of the progress dialog's additional description message, or <see langword="null"/> to leave the value unchanged.</param>
            <remarks>Call this method from the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event handler if you want to report progress.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="percentProgress"/> is out of range.</exception>
            <exception cref="T:System.InvalidOperationException">The progress dialog is not currently being displayed.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ReportProgress(System.Int32,System.String,System.String,System.Object)">
            <summary>
            Updates the dialog's progress bar.
            </summary>
            <param name="percentProgress">The percentage, from 0 to 100, of the operation that is complete.</param>
            <param name="text">The new value of the progress dialog's primary text message, or <see langword="null"/> to leave the value unchanged.</param>
            <param name="description">The new value of the progress dialog's additional description message, or <see langword="null"/> to leave the value unchanged.</param>
            <param name="userState">A state object that will be passed to the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ProgressChanged"/> event handler.</param>
            <remarks>Call this method from the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event handler if you want to report progress.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="percentProgress"/> is out of range.</exception>
            <exception cref="T:System.InvalidOperationException">The progress dialog is not currently being displayed.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.DoWork"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> containing data for the event.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.RunWorkerCompleted"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> containing data for the event.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.ProgressDialog.ProgressChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> containing data for the event.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation">
            <summary>
            Resource identifiers for default animations from shell32.dll.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation.FileMove">
            <summary>
            An animation representing a file move.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation.FileCopy">
            <summary>
            An animation representing a file copy.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation.FlyingPapers">
            <summary>
            An animation showing flying papers.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation.SearchGlobe">
            <summary>
            An animation showing a magnifying glass over a globe.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation.PermanentDelete">
            <summary>
            An animation representing a permament delete.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation.FromRecycleBinDelete">
            <summary>
            An animation representing deleting an item from the recycle bin.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation.ToRecycleBinDelete">
            <summary>
            An animation representing a file move to the recycle bin.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation.SearchComputer">
            <summary>
            An animation representing a search spanning the local computer.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation.SearchDocument">
            <summary>
            An animation representing a search in a document..
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.ShellAnimation.SearchFlashlight">
            <summary>
            An animation representing a search using a flashlight animation.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog">
            <summary>
            Displays a Task Dialog.
            </summary>
            <remarks>
            The task dialog contains an application-defined message text and title, icons, and any combination of predefined push buttons.
            Task Dialogs are supported only on Windows Vista and above. No fallback is provided; if you wish to use task dialogs
            and support operating systems older than Windows Vista, you must provide a fallback yourself. Check the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.OSSupportsTaskDialogs"/>
            property to see if task dialogs are supported. It is safe to instantiate the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/> class on an older
            OS, but calling <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Show"/> or <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ShowDialog"/> will throw an exception.
            </remarks>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Created">
            <summary>
            Event raised when the task dialog has been created.
            </summary>
            <remarks>
            This event is raised once after calling <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ShowDialog(System.Windows.Forms.IWin32Window)"/>, after the dialog
            is created and before it is displayed.
            </remarks>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Destroyed">
            <summary>
            Event raised when the task dialog has been destroyed.
            </summary>
            <remarks>
            The task dialog window no longer exists when this event is raised.
            </remarks>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ButtonClicked">
            <summary>
            Event raised when the user clicks a button on the task dialog.
            </summary>
            <remarks>
            Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property to <see langword="true" /> to prevent the dialog from being closed.
            </remarks>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.RadioButtonClicked">
            <summary>
            Event raised when the user clicks a radio button on the task dialog.
            </summary>
            <remarks>
            The <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property is ignored for this event.
            </remarks>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.HyperlinkClicked">
            <summary>
            Event raised when the user clicks a hyperlink.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.VerificationClicked">
            <summary>
            Event raised when the user clicks the verification check box.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Timer">
            <summary>
            Event raised periodically while the dialog is displayed.
            </summary>
            <remarks>
            <para>
              This event is raised only when the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.RaiseTimerEvent"/> property is set to <see langword="true" />. The event is
              raised approximately every 200 milliseconds.
            </para>
            <para>
              To reset the tick count, set the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TimerEventArgs.ResetTickCount" />
              property to <see langword="true" />.
            </para>
            </remarks>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandButtonClicked">
            <summary>
            Event raised when the user clicks the expand button on the task dialog.
            </summary>
            <remarks>
            The <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.ExpandButtonClickedEventArgs.Expanded"/> property indicates if the expanded information is visible
            or not after the click.
            </remarks>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.HelpRequested">
            <summary>
            Event raised when the user presses F1 while the dialog has focus.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/> class with the specified container.
            </summary>
            <param name="container">The <see cref="T:System.ComponentModel.IContainer"/> to add the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/> to.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.OSSupportsTaskDialogs">
            <summary>
            Gets a value that indicates whether the current operating system supports task dialogs.
            </summary>
            <value>
            Returns <see langword="true" /> for Windows Vista or later; otherwise <see langword="false" />.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Buttons">
            <summary>
            Gets a list of the buttons on the Task Dialog.
            </summary>
            <value>
            A list of the buttons on the Task Dialog.
            </value>
            <remarks>
            Custom buttons are displayed in the order they have in the collection. Standard buttons will always be displayed
            in the Windows-defined order, regardless of the order of the buttons in the collection.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.RadioButtons">
            <summary>
            Gets a list of the radio buttons on the Task Dialog.
            </summary>
            <value>
            A list of the radio buttons on the Task Dialog.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.WindowTitle">
            <summary>
            Gets or sets the window title of the task dialog.
            </summary>
            <value>
            The window title of the task dialog. The default is an empty string ("").
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.MainInstruction">
            <summary>
            Gets or sets the dialog's main instruction.
            </summary>
            <value>
            The dialog's main instruction. The default is an empty string ("").
            </value>
            <remarks>
            The main instruction of a task dialog will be displayed in a larger font and a different color than
            the other text of the task dialog.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Content">
            <summary>
            Gets or sets the dialog's primary content.
            </summary>
            <value>
            The dialog's primary content. The default is an empty string ("").
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.WindowIcon">
            <summary>
            Gets or sets the icon to be used in the title bar of the dialog.
            </summary>
            <value>
            An <see cref="T:System.Drawing.Icon"/> that represents the icon of the task dialog's window.
            </value>
            <remarks>
            This property is used only when the dialog is shown as a modeless dialog; if the dialog
            is modal, it will have no icon.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.MainIcon">
            <summary>
            Gets or sets the icon to display in the task dialog.
            </summary>
            <value>
            A <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon"/> that indicates the icon to display in the main content area of the task dialog.
            The default is <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon.Custom"/>.
            </value>
            <remarks>
            When this property is set to <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon.Custom"/>, use the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.CustomMainIcon"/> property to
            specify the icon to use.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.CustomMainIcon">
            <summary>
            Gets or sets a custom icon to display in the dialog.
            </summary>
            <value>
            An <see cref="T:System.Drawing.Icon"/> that represents the icon to display in the main content area of the task dialog,
            or <see langword="null" /> if no custom icon is used. The default value is <see langword="null"/>.
            </value>
            <remarks>
            This property is ignored if the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.MainIcon"/> property has a value other than <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon.Custom"/>.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.FooterIcon">
            <summary>
            Gets or sets the icon to display in the footer area of the task dialog.
            </summary>
            <value>
            A <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon"/> that indicates the icon to display in the footer area of the task dialog.
            The default is <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon.Custom"/>.
            </value>        
            <remarks>
            <para>
              When this property is set to <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon.Custom"/>, use the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.CustomFooterIcon"/> property to
              specify the icon to use.
            </para>
            <para>
              The footer icon is displayed only if the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Footer"/> property is not an empty string ("").
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.CustomFooterIcon">
            <summary>
            Gets or sets a custom icon to display in the footer area of the task dialog.
            </summary>
            <value>
            An <see cref="T:System.Drawing.Icon"/> that represents the icon to display in the footer area of the task dialog,
            or <see langword="null" /> if no custom icon is used. The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
              This property is ignored if the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.FooterIcon"/> property has a value other than <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon.Custom"/>.
            </para>
            <para>
              The footer icon is displayed only if the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Footer"/> property is not an empty string ("").
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ButtonStyle">
            <summary>
            Gets or sets a value that indicates whether custom buttons should be displayed as normal buttons or command links.
            </summary>
            <value>
            A <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButtonStyle"/> that indicates the display style of custom buttons on the dialog.
            The default value is <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButtonStyle.Standard"/>.
            </value>
            <remarks>
            <para>
              This property affects only custom buttons, not standard ones.
            </para>
            <para>
              If a custom button is being displayed on a task dialog
              with <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ButtonStyle"/> set to <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButtonStyle.CommandLinks"/>
              or <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButtonStyle.CommandLinksNoIcon"/>, you delineate the command from the 
              note by placing a line break in the string specified by <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem.Text"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.VerificationText">
            <summary>
            Gets or sets the label for the verification checkbox.
            </summary>
            <value>
            The label for the verification checkbox, or an empty string ("") if no verification checkbox
            is shown. The default value is an empty string ("").
            </value>
            <remarks>
            If no text is set, the verification checkbox will not be shown.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.IsVerificationChecked">
            <summary>
            Gets or sets a value that indicates whether the verification checkbox is checked ot not.
            </summary>
            <value>
            <see langword="true" /> if the verficiation checkbox is checked; otherwise, <see langword="false" />.
            </value>
            <remarks>
            <para>
              Set this property before displaying the dialog to determine the initial state of the check box.
              Use this property after displaying the dialog to determine whether the check box was checked when
              the user closed the dialog.
            </para>
            <note>
              This property is only used if <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.VerificationText"/> is not an empty string ("").
            </note>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedInformation">
            <summary>
            Gets or sets additional information to be displayed on the dialog.
            </summary>
            <value>
            Additional information to be displayed on the dialog. The default value is an empty string ("").
            </value>
            <remarks>
            <para>
              When this property is not an empty string (""), a control is shown on the task dialog that
              allows the user to expand and collapse the text specified in this property.
            </para>
            <para>
              The text is collapsed by default unless <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedByDefault"/> is set to <see langword="true" />.
            </para>
            <para>
              The expanded text is shown in the main content area of the dialog, unless <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandFooterArea"/>
              is set to <see langword="true" />, in which case it is shown in the footer area.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedControlText">
            <summary>
            Gets or sets the text to use for the control for collapsing the expandable information specified in <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedInformation"/>.
            </summary>
            <value>
            The text to use for the control for collapsing the expandable information, or an empty string ("") if the
            operating system's default text is to be used. The default is an empty string ("")
            </value>
            <remarks>
            <para>
              If this text is not specified and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.CollapsedControlText"/> is specified, the value of <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.CollapsedControlText"/>
              will be used for this property as well. If neither is specified, the operating system's default text is used.
            </para>
            <note>
              The control for collapsing or expanding the expandable information is displayed only if <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedInformation"/> is not
              an empty string ("")
            </note>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.CollapsedControlText">
            <summary>
            Gets or sets the text to use for the control for expading the expandable information specified in <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedInformation"/>.
            </summary>
            <value>
            The text to use for the control for expanding the expandable information, or an empty string ("") if the
            operating system's default text is to be used. The default is an empty string ("")
            </value>
            <remarks>
            <para>
              If this text is not specified and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedControlText"/> is specified, the value of <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedControlText"/>
              will be used for this property as well. If neither is specified, the operating system's default text is used.
            </para>
            <note>
              The control for collapsing or expanding the expandable information is displayed only if <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedInformation"/> is not
              an empty string ("")
            </note>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Footer">
            <summary>
            Gets or sets the text to be used in the footer area of the task dialog.
            </summary>
            <value>
            The text to be used in the footer area of the task dialog, or an empty string ("")
            if the footer area is not displayed. The default value is an empty string ("").
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Width">
            <summary>
            Specifies the width of the task dialog's client area in DLU's.
            </summary>
            <value>
            The width of the task dialog's client area in DLU's, or 0 to have the task dialog calculate the ideal width.
            The default value is 0.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.EnableHyperlinks">
            <summary>
            Gets or sets a value that indicates whether hyperlinks are allowed for the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Content"/>, <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedInformation"/>
            and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Footer"/> properties.
            </summary>
            <value>
            <see langword="true" /> when hyperlinks are allowed for the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Content"/>, <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedInformation"/>
            and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Footer"/> properties; otherwise, <see langword="false" />. The default value is <see langword="false" />.
            </value>
            <remarks>
            <para>
              When  this property is <see langword="true" />, the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Content"/>, <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedInformation"/>
              and <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Footer"/> properties can use hyperlinks in the following form: <c>&lt;A HREF="executablestring"&gt;Hyperlink Text&lt;/A&gt;</c>
            </para>
            <note>
              Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            </note>
            <para>
              Task dialogs will not actually execute hyperlinks. To take action when the user presses a hyperlink, handle the
              <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.HyperlinkClicked"/> event.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.AllowDialogCancellation">
            <summary>
            Gets or sets a value that indicates that the dialog should be able to be closed using Alt-F4, Escape and the title
            bar's close button even if no cancel button is specified.
            </summary>
            <value>
            <see langword="true" /> if the dialog can be closed using Alt-F4, Escape and the title
            bar's close button even if no cancel button is specified; otherwise, <see langword="false" />.
            The default value is <see langword="false" />.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandFooterArea">
            <summary>
            Gets or sets a value that indicates that the string specified by the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedInformation" /> property
            should be displayed at the bottom of the dialog's footer area instead of immediately after the dialog's content.
            </summary>
            <value>
            <see langword="true" /> if the string specified by the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedInformation" /> property
            should be displayed at the bottom of the dialog's footer area instead of immediately after the dialog's content;
            otherwise, <see langword="false" />. The default value is <see langword="false" />.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedByDefault">
            <summary>
            Gets or sets a value that indicates that the string specified by the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedInformation"/> property
            should be displayed by default.
            </summary>
            <value>
            <see langword="true" /> if the string specified by the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandedInformation"/> property
            should be displayed by default; <see langword="false" /> if it is hidden by default. The default value is
            <see langword="false" />.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.RaiseTimerEvent">
            <summary>
            Gets or sets a value that indicates whether the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Timer"/> event is raised periodically while the dialog
            is visible.
            </summary>
            <value>
            <see langword="true" /> when the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Timer"/> event is raised periodically while the dialog is visible; otherwise,
            <see langword="false" />. The default value is <see langword="false" />.
            </value>
            <remarks>
            The <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Timer"/> event will be raised approximately every 200 milliseconds if this property is <see langword="true" />.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.CenterParent">
            <summary>
            Gets or sets a value that indicates whether the dialog is centered in the parent window instead of the screen.
            </summary>
            <value>
            <see langword="true" /> when the dialog is centered relative to the parent window; <see langword="false" /> when it is centered on the screen.
            The default value is <see langword="false" />.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.RightToLeft">
            <summary>
            Gets or sets a value that indicates whether text is displayed right to left.
            </summary>
            <value>
            <see langword="true" /> when the content of the dialog is displayed right to left; otherwise, <see langword="false" />.
            The default value is <see langword="false" />.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.MinimizeBox">
            <summary>
            Gets or sets a value that indicates whether the dialog has a minimize box on its caption bar.
            </summary>
            <value>
            <see langword="true" /> if the dialog has a minimize box on its caption bar when modeless; otherwise,
            <see langword="false" />. The default is <see langword="false" />.
            </value>
            <remarks>
            A task dialog can only have a minimize box if it is displayed as a modeless dialog. The minimize box
            will never appear when using the designer "Preview" option, since that displays the dialog modally.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarStyle">
            <summary>
            Gets or sets the type of progress bar displayed on the dialog.
            </summary>
            <value>
            A <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle"/> that indicates the type of progress bar shown on the task dialog.
            </value>
            <remarks>
            <para>
              If this property is set to <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.MarqueeProgressBar"/>, the marquee will
              scroll as long as the dialog is visible.
            </para>
            <para>
              If this property is set to <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.ProgressBar"/>, the value of the
              <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarValue" /> property must be updated to advance the progress bar. This can be done e.g. by
              an asynchronous operation or from the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Timer"/> event.
            </para>
            <note>
              Updating the value of the progress bar using the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarValue"/> while the dialog is visible property may only be done from
              the thread on which the task dialog was created.
            </note>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarMarqueeAnimationSpeed">
            <summary>
            Gets or sets the marquee animation speed of the progress bar in milliseconds.
            </summary>
            <value>
            The marquee animation speed of the progress bar in milliseconds. The default value is 100.
            </value>
            <remarks>
            This property is only used if the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarStyle"/> property is 
            <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.MarqueeProgressBar"/>.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarMinimum">
            <summary>
            Gets or sets the lower bound of the range of the task dialog's progress bar.
            </summary>
            <value>
            The lower bound of the range of the task dialog's progress bar. The default value is 0.
            </value>
            <remarks>
            This property is only used if the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarStyle"/> property is 
            <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.ProgressBar"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The new property value is not smaller than <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarMaximum"/>.</exception>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarMaximum">
            <summary>
            Gets or sets the upper bound of the range of the task dialog's progress bar.
            </summary>
            <value>
            The upper bound of the range of the task dialog's progress bar. The default value is 100.
            </value>
            <remarks>
            This property is only used if the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarStyle"/> property is 
            <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.ProgressBar"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The new property value is not larger than <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarMinimum"/>.</exception>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarValue">
            <summary>
            Gets or sets the current value of the task dialog's progress bar.
            </summary>
            <value>
            The current value of the task dialog's progress bar. The default value is 0.
            </value>
            <remarks>
            This property is only used if the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarStyle"/> property is 
            <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.ProgressBar"/>.
            <note>
              Updating the value of the progress bar while the dialog is visible  may only be done from
              the thread on which the task dialog was created.
            </note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The new property value is smaller than <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarMinimum"/> or larger than <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarMaximum"/>.</exception>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ProgressBarState">
            <summary>
            Gets or sets the state of the task dialog's progress bar.
            </summary>
            <value>
            A <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarState"/> indicating the state of the task dialog's progress bar.
            The default value is <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarState.Normal"/>.
            </value>
            <remarks>
            This property is only used if the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle"/> property is 
            <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ProgressBarStyle.ProgressBar"/>.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Tag">
            <summary>
            Gets or sets an object that contains data about the dialog.
            </summary>
            <value>
            An object that contains data about the dialog. The default value is <see langword="null" />.
            </value>
            <remarks>
            Use this property to store arbitrary information about the dialog.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Show">
            <summary>
            Shows the task dialog as a modeless dialog.
            </summary>
            <returns>The button that the user clicked. Can be <see langword="null" /> if the user cancelled the dialog using the
            title bar close button.</returns>
            <remarks>
            <note>
              Although the dialog is modeless, this method does not return until the task dialog is closed.
            </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            <para>
              One of the properties or a combination of properties is not valid.
            </para>
            <para>
              -or-
            </para>
            <para>
              The dialog is already running.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">Task dialogs are not supported on the current operating system.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ShowDialog">
            <summary>
            Shows the task dialog as a modal dialog.
            </summary>
            <returns>The button that the user clicked. Can be <see langword="null" /> if the user cancelled the dialog using the
            title bar close button.</returns>
            <remarks>
            The dialog will use the active window as its owner. If the current process has no active window,
            the dialog will be displayed as a modeless dialog (identical to calling <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Show"/>).
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            <para>
              One of the properties or a combination of properties is not valid.
            </para>
            <para>
              -or-
            </para>
            <para>
              The dialog is already running.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">Task dialogs are not supported on the current operating system.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            This method is for internal iNKORE.UI.WinForms.Styler.Dialogs use and should not be called from your code.
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ClickVerification(System.Boolean,System.Boolean)">
            <summary>
            Simulates a click on the verification checkbox of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/>, if it exists.
            </summary>
            <param name="checkState"><see langword="true" /> to set the state of the checkbox to be checked; <see langword="false" /> to set it to be unchecked.</param>
            <param name="setFocus"><see langword="true" /> to set the keyboard focus to the checkbox; otherwise <see langword="false" />.</param>
            <exception cref="T:System.InvalidOperationException">The task dialog is not being displayed.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.OnHyperlinkClicked(iNKORE.UI.WinForms.Styler.Dialogs.HyperlinkClickedEventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.HyperlinkClicked"/> event.
            </summary>
            <param name="e">The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.HyperlinkClickedEventArgs"/> containing the data for the event.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.OnButtonClicked(iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemClickedEventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ButtonClicked"/> event.
            </summary>
            <param name="e">The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemClickedEventArgs"/> containing the data for the event.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.OnRadioButtonClicked(iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemClickedEventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.RadioButtonClicked"/> event.
            </summary>
            <param name="e">The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemClickedEventArgs"/> containing the data for the event.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.OnVerificationClicked(System.EventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.VerificationClicked"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> containing the data for the event.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.OnCreated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Created"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> containing the data for the event.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.OnTimer(iNKORE.UI.WinForms.Styler.Dialogs.TimerEventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Timer"/> event.
            </summary>
            <param name="e">The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TimerEventArgs"/> containing the data for the event.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.OnDestroyed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Destroyed"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> containing the data for the event.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.OnExpandButtonClicked(iNKORE.UI.WinForms.Styler.Dialogs.ExpandButtonClickedEventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ExpandButtonClicked"/> event.
            </summary>
            <param name="e">The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ExpandButtonClickedEventArgs"/> containing the data for the event.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.OnHelpRequested(System.EventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.HelpRequested"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> containing the data for the event.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing"><see langword="true" /> if managed resources should be disposed; otherwise, <see langword="false" />.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Handle">
            <summary>
            Gets the window handle of the task dialog.
            </summary>
            <value>
            The window handle of the task dialog when it is being displayed, or <see cref="F:System.IntPtr.Zero"/> when the dialog
            is not being displayed.
            </value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton">
            <summary>
            A button on a <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/>.
            </summary>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton.#ctor(iNKORE.UI.WinForms.Styler.Dialogs.ButtonType)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton"/> class with the specified button type.
            </summary>
            <param name="type">The type of the button.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton"/> class with the specified container.
            </summary>
            <param name="container">The <see cref="T:System.ComponentModel.IContainer"/> to add the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton"/> to.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton"/> class with the specified text.
            </summary>
            <param name="text">The text of the button.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton.ButtonType">
            <summary>
            Gets or sets the type of the button.
            </summary>
            <value>
            One of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.ButtonType"/> values that indicates the type of the button. The default value
            is <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ButtonType.Custom"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton.CommandLinkNote">
            <summary>
            Gets or sets the text of the note associated with a command link button.
            </summary>
            <value>
            The text of the note associated with a command link button.
            </value>
            <remarks>
            <para>
              This property applies only to buttons where the <see cref="T:System.Type"/> property
              is <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ButtonType.Custom"/>. For other button types, it is ignored.
            </para>
            <para>
              In addition, it is used only if the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ButtonStyle"/> property is set to
              <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButtonStyle.CommandLinks"/> or <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButtonStyle.CommandLinksNoIcon"/>;
              otherwise, it is ignored.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton.Default">
            <summary>
            Gets or sets a value that indicates if the button is the default button on the dialog.
            </summary>
            <value><see langword="true" /> if the button is the default button; otherwise, <see langword="false" />.
            The default value is <see langword="false" />.</value>
            <remarks>
            If no button has this property set to <see langword="true" />, the first button on the dialog will be the default button.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton.ElevationRequired">
            <summary>
            Gets or sets a value that indicates whether the Task Dialog button or command link should have a 
            User Account Control (UAC) shield icon (in other words, whether the action invoked by the 
            button requires elevation). 
            </summary>
            <value>
            <see langword="true" /> if the button contains a UAC shield icon; otherwise, <see langword="false" />.
            </value>
            <remarks>
            Elevation is not performed by the task dialog; the code implementing the operation that results from
            the button being clicked is responsible for performing elevation if required.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton.ItemCollection">
            <summary>
            Gets the collection that items of this type are part of.
            </summary>
            <value>
            If the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton"/> is currently associated with a <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/>, the
            <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Buttons"/> collection of that <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/>; otherwise, <see langword="null" />.
            </value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButtonStyle">
            <summary>
            Indicates the display style of custom buttons on a task dialog.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButtonStyle.Standard">
            <summary>
            Custom buttons are displayed as regular buttons.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButtonStyle.CommandLinks">
            <summary>
            Custom buttons are displayed as command links using a standard task dialog glyph.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButtonStyle.CommandLinksNoIcon">
            <summary>
            Custom buttons are displayed as command links without a glyph.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon">
            <summary>
            Indicates the icon to use for a task dialog.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon.Custom">
            <summary>
            A custom icon or no icon if no custom icon is specified.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon.Warning">
            <summary>
            System warning icon.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon.Error">
            <summary>
            System Error icon.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon.Information">
            <summary>
            System Information icon.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogIcon.Shield">
            <summary>
            Shield icon.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem">
            <summary>
            Represents a button or radio button on a task dialog.
            </summary>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> class with the specified container.
            </summary>
            <param name="container">The <see cref="T:System.ComponentModel.IContainer"/> to add the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> to.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem.Owner">
            <summary>
            Gets the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/> that owns this <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/>.
            </summary>
            <value>
            The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/> that owns this <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/>.
            </value>
            <remarks>
            This property is set automatically when the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> is added
            to the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Buttons"/> or <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.RadioButtons"/>
            collection of a <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/>.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem.Text">
            <summary>
            Gets or sets the text of the item.
            </summary>
            <value>
            The text of the item. The default value is an empty string ("").
            </value>
            <remarks>
            <para>
              For buttons, this property is ignored if <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton.ButtonType"/> is any value other 
              than <see cref="F:iNKORE.UI.WinForms.Styler.Dialogs.ButtonType.Custom"/>.
            </para>
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem.Enabled">
            <summary>
            Gets or sets a value that indicates whether the item is enabled.
            </summary>
            <value>
            <see langword="true" /> if this item is enabled; otherwise, <see langword="false" />.
            </value>
            <remarks>
            If a button or radio button is not enabled, it will be grayed out and cannot be
            selected or clicked.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem.Id">
            <summary>
            Gets or sets the ID of the item.
            </summary>
            <value>
            The unique identifier of the item.
            </value>
            <remarks>
            <para>
              The identifier of an item must be unique for the type of item on the task dialog (i.e. no two
              buttons can have the same id, no two radio buttons can have the same id, but a radio button
              can have the same id as a button).
            </para>
            <para>
              If this property is zero when the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> is added to the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Buttons"/>
              or <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.RadioButtons"/> collection of a task dialog, it will automatically be set
              to the next available id value.
            </para>
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem.Click">
            <summary>
            Simulates a click on the task dialog item.
            </summary>
            <remarks>
            This method is available only while the task dialog is being displayed. You would typically call
            it from one of the events fired by the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/> class while the dialog is visible.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            <para>The task dialog is not being displayed</para>
            <para>-or-</para>
            <para>The item has no associated task dialog.</para>
            </exception>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem.ItemCollection">
            <summary>
            When implemented in a derived class, gets the item collection on a task dialog that this type of item is
            part of.
            </summary>
            <value>
            For <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton"/> items, the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Buttons"/>
            collection of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/> instance this item is part of. For <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogRadioButton"/> items, the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.RadioButtons"/>
            collection of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/> instance this item is part of. If the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> is not
            currently associated with a <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/>, <see langword="null" />.
            </value>
            <remarks>
            The collection returned by this property is used to determine if there are any items with duplicate IDs.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem.UpdateOwner">
            <summary>
            Causes a full update of the owner dialog.
            </summary>
            <remarks>
            <para>
              When this method is called, the owner dialog will be updated to reflect the
              current state of the object.
            </para>
            <para>
              When the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> has no owner, or the owner is not being
              displayed, this method has no effect.
            </para>
            </remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemClickedEventArgs">
            <summary>
            Provides data for the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.ButtonClicked"/> event.
            </summary>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemClickedEventArgs.#ctor(iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemClickedEventArgs"/> class with the specified item.
            </summary>
            <param name="item">The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> that was clicked.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemClickedEventArgs.Item">
            <summary>
            Gets the item that was clicked.
            </summary>
            <value>
            The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> that was clicked.
            </value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemCollection`1">
            <summary>
            Represents a list of <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> objects.
            </summary>
            <typeparam name="T">The type of the task dialog item.</typeparam>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemCollection`1.ClearItems">
            <summary>
            Overrides the <see cref="M:System.Collections.ObjectModel.Collection`1.ClearItems"/> method.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Overrides the <see cref="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)"/> method.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. May not be <see langword="null" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> specified in <paramref name="item" /> is already associated with a different task dialog.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> specified in <paramref name="item" /> has a duplicate id or button type.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
              <paramref name="index"/> is less than zero.
            </para>
            <para>
              -or-
            </para>
            <para>
              <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </para>
            </exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemCollection`1.RemoveItem(System.Int32)">
            <summary>
            Overrides the <see cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)"/> method.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
              <paramref name="index"/> is less than zero.
            </para>
            <para>
              -or-
            </para>
            <para>
              <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </para>
            </exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItemCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Overrides the <see cref="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)"/> method.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. May not be <see langword="null" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> specified in <paramref name="item" /> is already associated with a different task dialog.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem"/> specified in <paramref name="item" /> has a duplicate id or button type.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
              <paramref name="index"/> is less than zero.
            </para>
            <para>
              -or-
            </para>
            <para>
              <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </para>
            </exception>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogRadioButton">
            <summary>
            A radio button on a task dialog.
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogRadioButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogRadioButton"/> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogRadioButton.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogRadioButton"/> class with the specified container.
            </summary>
            <param name="container">The <see cref="T:System.ComponentModel.IContainer"/> to add the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogRadioButton"/> to.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogRadioButton.Checked">
            <summary>
            Gets or sets a value that indicates whether the radio button is checked.
            </summary>
            <value>
            <see langword="true"/> if the radio button is checked; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            Setting this property while the dialog is being displayed has no effect. Instead, use the <see cref="M:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogItem.Click"/>
            method to check a particular radio button.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogRadioButton.ItemCollection">
            <summary>
            Gets the collection that items of this type are part of.
            </summary>
            <value>
            If the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialogButton"/> is currently associated with a <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/>, the
            <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Buttons"/> collection of that <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog"/>; otherwise, <see langword="null" />.
            </value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.TimerEventArgs">
            <summary>
            Provides data for the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.TaskDialog.Timer"/> event.
            </summary>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.TimerEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.TimerEventArgs"/> class with the specified tick count.
            </summary>
            <param name="tickCount">The tick count.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TimerEventArgs.ResetTickCount">
            <summary>
            Gets or sets a value that indicates whether the tick count should be reset.
            </summary>
            <value>
            <see langword="true" /> to reset the tick count after the event handler returns; otherwise, <see langword="false" />.
            The default value is <see langword="false" />.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.TimerEventArgs.TickCount">
            <summary>
            Gets the current tick count of the timer.
            </summary>
            <value>
            The number of milliseconds that has elapsed since the dialog was created or since the last time the event handler returned
            with the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.TimerEventArgs.ResetTickCount"/> property set to <see langword="true" />.
            </value>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog">
            <summary>
            Displays a dialog box from which the user can select a file.
            </summary>
            <remarks>
            <para>
              This class will use the Vista style file dialog if possible, and automatically fall back to the old-style 
              dialog on versions of Windows older than Vista.
            </para>
            <para>
              As of .Net 3.5 and .Net 2.0 SP1, the regular <see cref="T:System.Windows.Forms.FileDialog"/> class will also use
              the new Vista style dialogs. However, certain options, such as settings <see cref="P:System.Windows.Forms.OpenFileDialog.ShowReadOnly"/>,
              still cause that class to revert to the old style dialogs. For this reason, this class is still provided.
              It is recommended that you use the <see cref="T:System.Windows.Forms.FileDialog"/> class whenever possible.
            </para>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.FileOk">
            <summary>
            Occurs when the user clicks on the Open or Save button on a file dialog box.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.#ctor">
            <summary>
            Creates a new insatnce of <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog" /> class.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.IsAdvFileDialogSupported">
            <summary>
            Gets a value that indicates whether the current OS supports Vista-style common file dialogs.
            </summary>
            <value>
            <see langword="true"/> on Windows Vista or newer operating systems; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.AddExtension">
            <summary>
            Gets or sets a value indicating whether the dialog box automatically adds an extension to a file name 
            if the user omits the extension.
            </summary>
            <value>
            <see langword="true"/> if the dialog box adds an extension to a file name if the user omits the extension; otherwise, <see langword="false"/>. 
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.CheckFileExists">
            <summary>
            Gets or sets a value indicating whether the dialog box displays a warning if the user specifies a file name that does not exist.
            </summary>
            <value>
            <see langword="true"/> if the dialog box displays a warning if the user specifies a file name that does not exist; otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.CheckPathExists">
            <summary>
            Gets or sets a value indicating whether the dialog box displays a warning if the user specifies a path that does not exist.
            </summary>
            <value>
            <see langword="true"/> if the dialog box displays a warning when the user specifies a path that does not exist; otherwise, <see langword="false"/>. 
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.DefaultExt">
            <summary>
            Gets or sets the default file name extension.
            </summary>
            <value>
            The default file name extension. The returned string does not include the period. The default value is an empty string ("").
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.DereferenceLinks">
            <summary>
            Gets or sets a value indicating whether the dialog box returns the location of the file referenced by the shortcut 
            or whether it returns the location of the shortcut (.lnk).
            </summary>
            <value>
            <see langword="true"/> if the dialog box returns the location of the file referenced by the shortcut; otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.FileName">
            <summary>
            Gets or sets a string containing the file name selected in the file dialog box.
            </summary>
            <value>
            The file name selected in the file dialog box. The default value is an empty string ("").
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.FileNames">
            <summary>
            Gets the file names of all selected files in the dialog box.
            </summary>
            <value>
            An array of type String, containing the file names of all selected files in the dialog box.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.Filter">
            <summary>
            Gets or sets the current file name filter string, which determines the choices that appear in the 
            "Save as file type" or "Files of type" box in the dialog box.
            </summary>
            <value>
            The file filtering options available in the dialog box.
            </value>
            <exception cref="T:System.ArgumentException">Filter format is invalid.</exception>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.FilterIndex">
            <summary>
            Gets or sets the index of the filter currently selected in the file dialog box.
            </summary>
            <value>
            A value containing the index of the filter currently selected in the file dialog box. The default value is 1.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.InitialDirectory">
            <summary>
            Gets or sets the initial directory displayed by the file dialog box.
            </summary>
            <value>
            The initial directory displayed by the file dialog box. The default is an empty string ("").
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.RestoreDirectory">
            <summary>
            Gets or sets a value indicating whether the dialog box restores the current directory before closing.
            </summary>
            <value>
            <see langword="true"/> if the dialog box restores the current directory to its original value if the user changed the 
            directory while searching for files; otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.ShowHelp">
            <summary>
            Gets or sets a value indicating whether the Help button is displayed in the file dialog box.
            </summary>
            <value>
            <see langword="true"/> if the dialog box includes a help button; otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.Title">
            <summary>
            Gets or sets the file dialog box title.
            </summary>
            <value>
            The file dialog box title. The default value is an empty string ("").
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.SupportMultiDottedExtensions">
            <summary>
            Gets or sets whether the dialog box supports displaying and saving files that have multiple file name extensions.
            </summary>
            <value>
            <see langword="true"/> if the dialog box supports multiple file name extensions; otherwise, <see langword="false"/>. The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.ValidateNames">
            <summary>
            Gets or sets a value indicating whether the dialog box accepts only valid Win32 file names.
            </summary>
            <value>
            <see langword="true"/> if the dialog box accepts only valid Win32 file names; otherwise, <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.DownlevelDialog">
            <summary>
            Gets or sets the downlevel file dialog which is to be used if the Vista-style
            dialog is not supported.
            </summary>
            <value>
            The downlevel file dialog which is to be used if the Vista-style
            dialog is not supported.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.RunDialog(System.IntPtr)">
            <summary>
            Specifies a common dialog box.
            </summary>
            <param name="hwndOwner">A value that represents the window handle of the owner window for the common dialog box.</param>
            <returns><see langword="true"/> if the file could be opened; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.FileOk" /> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog">
            <summary>
            Prompts the user to select a folder.
            </summary>
            <remarks>
            This class will use the Vista style Select Folder dialog if possible, or the regular FolderBrowserDialog
            if it is not. Note that the Vista style dialog is very different, so using this class without testing
            in both Vista and older Windows versions is not recommended.
            </remarks>
            <threadsafety instance="false" static="true" />
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.HelpRequest">
            <summary>
            Occurs when the user clicks the Help button on the dialog box.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog" /> class.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.IsVistaFolderDialogSupported">
            <summary>
            Gets a value that indicates whether the current OS supports Vista-style common file dialogs.
            </summary>
            <value>
            <see langword="true" /> on Windows Vista or newer operating systems; otherwise, <see langword="false" />.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.Description">
            <summary>
            Gets or sets the descriptive text displayed above the tree view control in the dialog box, or below the list view control
            in the Vista style dialog.
            </summary>
            <value>
            The description to display. The default is an empty string ("").
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.RootFolder">
            <summary>
            Gets or sets the root folder where the browsing starts from. This property has no effect if the Vista style
            dialog is used.
            </summary>
            <value>
            One of the <see cref="T:System.Environment.SpecialFolder" /> values. The default is Desktop.
            </value>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="T:System.Environment.SpecialFolder" /> values.</exception>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.SelectedPath">
            <summary>
            Gets or sets the path selected by the user.
            </summary>
            <value>
            The path of the folder first selected in the dialog box or the last folder selected by the user. The default is an empty string ("").
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.ShowNewFolderButton">
            <summary>
            Gets or sets a value indicating whether the New Folder button appears in the folder browser dialog box. This
            property has no effect if the Vista style dialog is used; in that case, the New Folder button is always shown.
            </summary>
            <value>
            <see langword="true" /> if the New Folder button is shown in the dialog box; otherwise, <see langword="false" />. The default is <see langword="true" />.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.UseDescriptionForTitle">
            <summary>
            Gets or sets a value that indicates whether to use the value of the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.Description" /> property
            as the dialog title for Vista style dialogs. This property has no effect on old style dialogs.
            </summary>
            <value><see langword="true" /> to indicate that the value of the <see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.Description" /> property is used as dialog title; <see langword="false" />
            to indicate the value is added as additional text to the dialog. The default is <see langword="false" />.</value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.RunDialog(System.IntPtr)">
            <summary>
            Specifies a common dialog box.
            </summary>
            <param name="hwndOwner">A value that represents the window handle of the owner window for the common dialog box.</param>
            <returns><see langword="true" /> if the file could be opened; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.VistaFolderBrowserDialog" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.AdvOpenFileDialog">
            <summary>
            Prompts the user to open a file.
            </summary>
            <remarks>
            <para>
              This class will use the Vista style file dialog if possible, and automatically fall back to the old-style 
              dialog on versions of Windows older than Vista.
            </para>
            <para>
              As of .Net 3.5 and .Net 2.0 SP1, the regular <see cref="T:System.Windows.Forms.OpenFileDialog"/> class will also use
              the new Vista style dialogs. However, certain options, such as settings <see cref="P:System.Windows.Forms.OpenFileDialog.ShowReadOnly"/>,
              still cause that class to revert to the old style dialogs. For this reason, this class is still provided.
              It is recommended that you use the <see cref="T:System.Windows.Forms.FileDialog"/> class whenever possible.
            </para>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvOpenFileDialog.#ctor">
            <summary>
            Creates a new instance of <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.AdvOpenFileDialog" /> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvOpenFileDialog.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.AdvOpenFileDialog" /> class.
            </summary>
            <param name="forceDownlevel">When <see langword="true"/>, the old style common file dialog will always be used even if the OS supports the Vista style.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvOpenFileDialog.CheckFileExists">
            <summary>
            Gets or sets a value indicating whether the dialog box displays a warning if the user specifies a file name that does not exist.
            </summary>
            <value>
            <see langword="true"/> if the dialog box displays a warning if the user specifies a file name that does not exist; otherwise, <see langword="false"/>. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvOpenFileDialog.Multiselect">
            <summary>
            Gets or sets a value indicating whether the dialog box allows multiple files to be selected.
            </summary>
            <value>
            <see langword="true"/> if the dialog box allows multiple files to be selected together or concurrently; otherwise, <see langword="false"/>. 
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvOpenFileDialog.ShowReadOnly">
            <summary>
            Gets or sets a value indicating whether the dialog box contains a read-only check box.
            </summary>
            <value>
            <see langword="true"/> if the dialog box contains a read-only check box; otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
            <remarks>
            If the Vista style dialog is used, this property can only be used to determine whether the user chose
            Open as read-only on the dialog; setting it in code will have no effect.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvOpenFileDialog.ReadOnlyChecked">
            <summary>
            Gets or sets a value indicating whether the read-only check box is selected.
            </summary>
            <value>
            <see langword="true"/> if the read-only check box is selected; otherwise, <see langword="false"/>. The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvOpenFileDialog.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvOpenFileDialog.OpenFile">
            <summary>
            Opens the file selected by the user, with read-only permission. The file is specified by the FileName property. 
            </summary>
            <returns>A Stream that specifies the read-only file selected by the user.</returns>
            <exception cref="T:System.ArgumentNullException">The file name is <see langword="null"/>.</exception>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.AdvSaveFileDialog">
            <summary>
            Prompts the user to select a location for saving a file.
            </summary>
            <remarks>
            <para>
              This class will use the Vista style file dialog if possible, and automatically fall back to the old-style 
              dialog on versions of Windows older than Vista.
            </para>
            <para>
              As of .Net 3.5 and .Net 2.0 SP1, the regular <see cref="T:System.Windows.Forms.FileDialog"/> class will also use
              the new Vista style dialogs. However, certain options, such as settings <see cref="P:System.Windows.Forms.OpenFileDialog.ShowReadOnly"/>,
              still cause that class to revert to the old style dialogs. For this reason, this class is still provided.
              It is recommended that you use the <see cref="T:System.Windows.Forms.SaveFileDialog"/> class whenever possible.
            </para>
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvSaveFileDialog.#ctor">
            <summary>
            Creates a new instance of <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.AdvSaveFileDialog" /> class.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvSaveFileDialog.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:iNKORE.UI.WinForms.Styler.Dialogs.AdvSaveFileDialog" /> class.
            </summary>
            <param name="forceDownlevel">When <see langword="true"/>, the old style common file dialog will always be used even if the OS supports the Vista style.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvSaveFileDialog.CreatePrompt">
            <summary>
            Gets or sets a value indicating whether the dialog box prompts the user for permission to create a file if the 
            user specifies a file that does not exist.
            </summary>
            <value>
            <see langword="true"/> if the dialog box prompts the user before creating a file if the user specifies a file name that does not exist; 
            <see langword="false"/> if the dialog box automatically creates the new file without prompting the user for permission. The default 
            value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvSaveFileDialog.OverwritePrompt">
            <summary>
            Gets or sets a value indicating whether the Save As dialog box displays a warning if the user 
            specifies a file name that already exists.
            </summary>
            <value>
            <see langword="true"/> if the dialog box prompts the user before overwriting an existing file if the user specifies a file 
            name that already exists; <see langword="false"/> if the dialog box automatically overwrites the existing file without 
            prompting the user for permission. The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvSaveFileDialog.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvSaveFileDialog.OpenFile">
            <summary>
            Opens the file with read/write permission selected by the user.
            </summary>
            <returns>The read/write file selected by the user.</returns>
            <exception cref="T:System.ArgumentNullException"><see cref="P:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.FileName"/> is <see langword="null"/> or an empty string.</exception>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dialogs.AdvSaveFileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:iNKORE.UI.WinForms.Styler.Dialogs.AdvFileDialog.FileOk" /> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</param>        
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.AnimationLoadErrorFormat">
            <summary>
              Looks up a localized string similar to Unable to load the progress dialog animation: {0}.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.CredentialEmptyTargetError">
            <summary>
              Looks up a localized string similar to The credential target may not be an empty string..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.CredentialError">
            <summary>
              Looks up a localized string similar to An error occurred acquiring credentials..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.CredentialPromptNotCalled">
            <summary>
              Looks up a localized string similar to PromptForCredentialsWithSave has not been called or the credentials were modified after the call..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.DuplicateButtonTypeError">
            <summary>
              Looks up a localized string similar to The task dialog already has a non-custom button with the same type..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.DuplicateItemIdError">
            <summary>
              Looks up a localized string similar to The task dialog already has an item with the same id..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.FileNotFoundFormat">
            <summary>
              Looks up a localized string similar to The file &quot;{0}&quot; could not be found..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.GlassNotSupportedError">
            <summary>
              Looks up a localized string similar to The current operating system does not support glass, or the Desktop Window Manager is not enabled..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.Help">
            <summary>
              Looks up a localized string similar to Help.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.InvalidFilterString">
            <summary>
              Looks up a localized string similar to Invalid filter string,.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.InvalidTaskDialogItemIdError">
            <summary>
              Looks up a localized string similar to The id of a task dialog item must be higher than 0..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.NoAssociatedTaskDialogError">
            <summary>
              Looks up a localized string similar to The item is not associated with a task dialog..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.NonCustomTaskDialogButtonIdError">
            <summary>
              Looks up a localized string similar to Cannot change the id for a standard button..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.ProgressDialogNotRunningError">
            <summary>
              Looks up a localized string similar to The progress dialog is not shown..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.ProgressDialogRunning">
            <summary>
              Looks up a localized string similar to The progress dialog is already running..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.TaskDialogEmptyButtonLabelError">
            <summary>
              Looks up a localized string similar to A custom button or radio button cannot have an empty label..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.TaskDialogIllegalCrossThreadCallError">
            <summary>
              Looks up a localized string similar to Cross-thread operation not valid: Task dialog accessed from a thread other than the thread it was created on while it is visible..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.TaskDialogItemHasOwnerError">
            <summary>
              Looks up a localized string similar to The task dialog item already belongs to another task dialog..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.TaskDialogNoButtonsError">
            <summary>
              Looks up a localized string similar to The task dialog must have buttons..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.TaskDialogNotRunningError">
            <summary>
              Looks up a localized string similar to The task dialog is not current displayed..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.TaskDialogRunningError">
            <summary>
              Looks up a localized string similar to The task dialog is already being displayed..
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dialogs.Properties.Resources.TaskDialogsNotSupportedError">
            <summary>
              Looks up a localized string similar to The operating system does not support task dialogs..
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dwm.DwmManager">
            <summary>Main DWM class, provides Thumbnail registration, glass sheet effect and blur behind.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.Register(System.Windows.Forms.Form,System.IntPtr)">
            <summary>Registers a thumbnail to be drawn on a Windows Form.</summary>
            <remarks>The thumbnail will not be drawn until you update the thumbnail's properties calling Update().</remarks>
            <param name="destination">The Windows Form instance on which to draw the thumbnail.</param>
            <param name="source">The handle (HWND) of the window that has to be drawn.</param>
            <returns>A Thumbnail instance, needed to unregister and to update properties.</returns>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.Register(System.IntPtr,System.IntPtr)">
            <summary>Registers a thumbnail to be drawn on a window.</summary>
            <remarks>The thumbnail will not be drawn until you update the thumbnail's properties calling Update().</remarks>
            <param name="destination">The handle (HWND) of the window on which the thumbnail will be drawn.</param>
            <param name="source">The handle (HWND) of the window that has to be drawn.</param>
            <returns>A Thumbnail instance, needed to unregister and to update properties.</returns>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.Unregister(iNKORE.UI.WinForms.Styler.Dwm.Thumbnail)">
            <summary>Unregisters the thumbnail handle.</summary>
            <remarks>The handle is unvalid after the call and should not be used again.</remarks>
            <param name="handle">A handle to a registered thumbnail.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.EnableBlurBehind(System.IntPtr)">
            <summary>Enable the Aero "Blur Behind" effect on the whole client area. Background must be black.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.EnableBlurBehind(System.Windows.Forms.Form)">
            <summary>Enable the Aero "Blur Behind" effect on the whole client area. Background must be black.</summary>
            <param name="form"></param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.EnableBlurBehind(System.IntPtr,System.IntPtr)">
            <summary>Enable the Aero "Blur Behind" effect on a specific region. Background of the region must be black.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.DisableBlurBehind(System.IntPtr)">
            <summary>Disables the Aero "Blur Behind" effect.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.EnableGlassFrame(System.Windows.Forms.Form,iNKORE.UI.WinForms.Styler.Dwm.Margins)">
            <summary>Extends the Aero "Glass Frame" into the client area. Background must be black.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.EnableGlassFrame(System.IntPtr,iNKORE.UI.WinForms.Styler.Dwm.Margins)">
            <summary>Extends the Aero "Glass Frame" into the client area. Background must be black.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.EnableGlassSheet(System.Windows.Forms.Form)">
            <summary>Extends the Aero "Glass Frame" to the whole client area ("Glass Sheet" effect). Background must be black.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.EnableGlassSheet(System.IntPtr)">
            <summary>Extends the Aero "Glass Frame" to the whole client area ("Glass Sheet" effect). Background must be black.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.DisableGlassFrame(System.Windows.Forms.Form)">
            <summary>Disables the Aero "Glass Frame".</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.DisableGlassFrame(System.IntPtr)">
            <summary>Disables the Aero "Glass Frame".</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.SetWindowFlip3dPolicy(System.Windows.Forms.Form,iNKORE.UI.WinForms.Styler.Dwm.Flip3DPolicy)">
            <summary>
            Sets a window's Flip 3D policy.
            </summary>
            <param name="form">Form whose policy is to be set.</param>
            <param name="policy">Desired Flip 3D policy.</param>
            <remarks>Is ignored on OSs that do not support Aero.</remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.SetDisallowPeek(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Disallows Aero Peek on a window (or allows it).
            </summary>
            <param name="form">Form whose Aero Peek preview should be disabled.</param>
            <param name="disallowPeek">True if Aero Peek should be disabled for the window.</param>
            <remarks>Is ignored on OSs that do not support Aero Peek.</remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.SetExcludeFromPeek(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Sets a window's state in order to exclude (or include) it in Aero Peek.
            </summary>
            <param name="form">Form whose Aero Peek exclusion state is to be set.</param>
            <param name="excluded">Set to true to exlude the window from Aero Peek.</param>
            <remarks>Is ignored on OSs that do not support Aero Peek.</remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.DwmManager.SetExludeFromPeek(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Sets a window's state in order to exclude (or include) it in Aero Peek.
            </summary>
            <param name="form">Form whose Aero Peek exclusion state is to be set.</param>
            <param name="excluded">Set to true to exlude the window from Aero Peek.</param>
            <remarks>Is ignored on OSs that do not support Aero Peek.</remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dwm.Flip3DPolicy">
            <summary>
            Determines a window's Flip 3D policy.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dwm.Flip3DPolicy.Default">
            <summary>
            Default Flip 3D behavior.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dwm.Flip3DPolicy.ExcludeBelow">
            <summary>
            Excludes the window from Flip 3D and hides it behind the animation.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dwm.Flip3DPolicy.ExcludeAbove">
            <summary>
            Excludes the window from Flip 3D and shows it above the animation.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dwm.GlassHelper.HandleFormMovement">
            <summary>
            
            </summary>
            <remarks>
            Handler will be kept alive by the event references on the form.
            As soon as the form is disposed, the handler will be disposed as well.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.GlassHelper.HandleFormMovementOnGlass(System.Windows.Forms.Form,iNKORE.UI.WinForms.Styler.Dwm.Margins)">
            <summary>
            Adds a handler on the Form that enables the user to move the window around
            by clicking on a glass margin (or the title bar, as usual).
            </summary>
            <param name="form">The form that will be controlled.</param>
            <param name="margins">Margins of the glass sheet.</param>
            <remarks>
            Eventual UI elements on the glass sheet will prevent the handler from receiving events
            (except the ThemeText control, which manually redirects mouse events to the form).
            </remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dwm.GlassHelper.HandleBackground">
            <summary>
            
            </summary>
            <remarks>
            Handler will be kept alive by the event references on the form.
            As soon as the form is disposed, the handler will be disposed as well.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.GlassHelper.HandleBackgroundPainting(System.Windows.Forms.Form,iNKORE.UI.WinForms.Styler.Dwm.Margins)">
            <summary>
            Adds a handler on the Form that automatically paints the glass background black
            </summary>
            <param name="form">The form that will be controlled.</param>
            <param name="margins">Margins of the glass sheet.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dwm.GlassForm">
            <summary>
            Form that automatically handles glass margins and mouse dragging.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.GlassForm.#ctor">
            <summary>
            Construct a new form without glass margins.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.GlassForm.GlassMargins">
            <summary>Gets or sets the glass margins of the form.</summary>
            <remarks>This property should be used when setting the margins from code.</remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.GlassForm.GlassDesignerMargins">
            <summary>Gets or sets the glass margins of the form.</summary>
            <remarks>This property should be used when setting the margins through the designer.</remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.GlassForm.HandleMouseMove">
            <summary>Gets or sets whether mouse dragging should be handled automatically.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.GlassForm.GlassEnabled">
            <summary>Gets or sets whether the extended glass margin is enabled or not.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.GlassForm.HideTitle">
            <summary>
            Gets or sets whether the window title and icon should be hidden.
            </summary>
            <remarks>
            The window caption will still be visible, but title text and icon will not be.
            A form with a hidden title will look like an Explorer window on Windows Vista or Windows 7.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.GlassForm.HideCaption">
            <summary>
            Gets or sets whether the window caption should be hidden altogether.
            </summary>
            <remarks>
            Should be set before handle creation.
            </remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dwm.Margins">
            <summary>Margins structure for the Glass Sheet effect.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.Margins.IsMarginless">
            <summary>
            Gets whether this margin represents a negative measure on each side.
            </summary>
            <remarks>
            Used to specify non-existing margins on glass frames.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.Margins.IsNull">
            <summary>
            Gets whether this margin measures 0 pixels on each side.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.Margins.IsOutsideMargins(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Returns whether a point in client coordinates is outside the margins defined by this instance.
            </summary>
            <param name="clientPoint">Point in client coordinates.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.Margins.AsPadding">
            <summary>
            Gets the margins value as a padding instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.Dwm.Margins.Zero">
            <summary>
            Gets a static readonly 0-pixel margin.
            This margin returns true on the IsNull property.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Dwm.Thumbnail">
            <summary>Handle to a DWM Thumbnail.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.Thumbnail.IsInvalid">
            <summary>Returns true if the handle is valid, false if the handle has been closed or hasn't been initialized.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.Thumbnail.Opacity">
            <summary>Sets the thumbnail opacity value, from 0 to 255 (opaque).</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.Thumbnail.ShowOnlyClientArea">
            <summary>Sets whether only the client area of the thumbnailed window should be shown or
            the entire window area.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.Thumbnail.DestinationRectangle">
            <summary>Area in the destination window on which the thumbnail should be drawn.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.Thumbnail.SourceRectangle">
            <summary>Region of the source window that should be drawn.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.Thumbnail.Visible">
            <summary>Sets whether the thumbnail should be drawn or not.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Dwm.Thumbnail.SourceSize">
            <summary>Gets the thumbnail's original size.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.Thumbnail.Update(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Byte,System.Boolean,System.Boolean)">
            <summary>Updates the thumbnail's display settings.</summary>
            <param name="destination">Drawing region on destination window.</param>
            <param name="source">Origin region from source window.</param>
            <param name="opacity">Opacity. 0 is transparent, 255 opaque.</param>
            <param name="visible">Visibility flag.</param>
            <param name="onlyClientArea">If true, only the client area of the window will be rendered. Otherwise, the borders will be be rendered as well.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.Thumbnail.Update(System.Drawing.Rectangle,System.Byte,System.Boolean,System.Boolean)">
            <summary>Updates the thumbnail's display settings.</summary>
            <param name="destination">Drawing region on destination window.</param>
            <param name="opacity">Opacity. 0 is transparent, 255 opaque.</param>
            <param name="visible">Visibility flag.</param>
            <param name="onlyClientArea">If true, only the client area of the window will be rendered. Otherwise, the borders will be be rendered as well.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.ThumbnailViewer.SetThumbnail(System.Windows.Forms.Form,System.Boolean)">
            <summary>Sets the origin of the thumbnail and shows the thumbnail on the control.</summary>
            <param name="originForm">The Form instance that will be thumbnailed.</param>
            <param name="trackFormUpdates">True if the control should automatically update itself in case the thumbnailed
            form changes size or is closed.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Dwm.ThumbnailViewer.Update">
            <summary>Forces and update of the thumbnail.</summary>
            <remarks>Use this method if you know that the thumbnailed window has been resized and the thumbnail control should react to these changes.</remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.GdiMemoryContext.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:VSControls.GDIMemoryContext" /> and
            optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.Native.Windows.GetActiveWindow">
            <summary>Returns the active windows on the current thread.</summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.OsSupport">
            <summary>
            Static class providing information about the current support for Vista-only features.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.OsSupport.IsVistaOrBetter">
            <summary>
            Gets whether the running operating system is Windows Vista or a more recent version.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.OsSupport.IsSevenOrBetter">
            <summary>
            Gets whether the running operating system is Windows Seven or a more recent version.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.OsSupport.IsEightOrBetter">
            <summary>
            Gets whether the running operating system is Windows 8 or a more recent version.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.OsSupport.IsCompositionEnabled">
            <summary>Is true if the DWM composition engine is currently enabled.</summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Resources.ExceptionMessages">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.ExceptionMessages.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.ExceptionMessages.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.ExceptionMessages.CommonControlEntryPointNotFound">
            <summary>
              查找类似 Common Controls library version 6.0 not loaded. Must run on Vista and must provide a manifest. 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.ExceptionMessages.DwmNotEnabled">
            <summary>
              查找类似 Desktop composition is not enabled. 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.ExceptionMessages.DwmOsNotSupported">
            <summary>
              查找类似 Desktop composition is not supported by operating system. 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.ExceptionMessages.DwmThumbnailQueryFailure">
            <summary>
              查找类似 Unable to get thumbnail&apos;s original size. 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.ExceptionMessages.DwmThumbnailUpdateFailure">
            <summary>
              查找类似 Unable to update thumbnail properties. 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.ExceptionMessages.DwmWindowMatch">
            <summary>
              查找类似 Source and target windows cannot be the same. 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.ExceptionMessages.NativeCallFailure">
            <summary>
              查找类似 Native call to {0} failed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.ExceptionMessages.TaskDialogFailure">
            <summary>
              查找类似 Failed to create TaskDialog. 的本地化字符串。
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.Resources.Pictures">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.Pictures.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.Pictures.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.Pictures.ActiveSearch">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.Resources.Pictures.InactiveSearch">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.CommonButton">
            <summary>
            Common Task Dialog buttons.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.CommonButtonResult">
            <summary>
            Results returned by Task Dialogs when closed by the user through a common button.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.CommonIcon">
            <summary>
            Common Task Dialog icon values.
            </summary>
            <remarks>
            Common icon values also determine how the task dialog's main instruction is styled.
            </remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.CustomButton">
            <summary>
            Custom button shown on a Task Dialog.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.CustomButton.#ctor(System.Int32,System.String)">
            <summary>
            Instantiates a new custom button with an ID and a text.
            </summary>
            <param name="id">Unique ID that will be returned by the Task Dialog if the button is clicked.</param>
            <param name="text">Text label shown on the button.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.CustomButton.#ctor(iNKORE.UI.WinForms.Styler.TaskDialog.CommonButtonResult,System.String)">
            <summary>
            Instantiates a new custom button with an ID and a text.
            </summary>
            <param name="id">Common ID that will be returned by the Task Dialog if the button is clicked.</param>
            <param name="text">Text label shown on the button.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.CustomButton.Id">
            <summary>
            Unique ID that will be returned by the Task Dialog if the button is clicked.
            Use values greater than 8 to prevent conflicts with common button IDs.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.CustomButton.Text">
            <summary>
            Text label shown on the button.
            </summary>
            <remarks>
            If you enable Command Links, a newline here separates the upper from the
            lower string on the button.
            </remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.Message">
            <summary>
            Stores a Task Dialog message that will be sent to a dialog in order to update its state.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.Message.DialogElements">
            <summary>Text values that can be updated.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.Message.#ctor(iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogMessages,System.Int32,System.Int32)">
            <summary>Simple int, int message.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.Message.#ctor(iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogMessages,System.Int32,System.Boolean)">
            <summary>Simple int, bool message.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.Message.#ctor(iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogMessages,System.Boolean,System.Boolean)">
            <summary>Simple bool, bool message.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.Message.#ctor(iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogMessages,System.Boolean,System.Int32)">
            <summary>Simple bool, int message.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.Message.#ctor(iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogMessages,System.Int32,System.Int32,System.Int32)">
            <summary>Simple int, long (hi word and lo word) message.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.Message.#ctor(iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogMessages,iNKORE.UI.WinForms.Styler.TaskDialog.Message.DialogElements,System.String)">
            <summary>Text updating message.</summary>
            <remarks>The string will be marshaled: the Message must be correctly disposed after use.</remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.Message.#ctor(iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogMessages,System.Int32,iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogConfig)">
            <summary>Navigation message.</summary>
            <remarks>The config structure will be marshaled: must be correctly disposed after use.</remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.Message.Cleanup(iNKORE.UI.WinForms.Styler.TaskDialog.Message)">
            <summary>
            Cleans up unmanages memory allocated by the message.
            </summary>
            <remarks>
            This pattern is used instead of <see cref="T:System.IDisposable"/> to avoid
            unnecessary memory allocations and boxing.
            </remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialog(System.IntPtr,System.IntPtr,System.String,System.String,System.String,System.Int32,System.IntPtr,System.Int32@)">
            <summary>Direct Task Dialog call.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogIndirect(iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogConfig@,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>Indirect Task Dialog call. Allows complex dialogs with interaction logic (via callback).</summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogConfig">
            <summary>The Task Dialog config structure.</summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogFlags">
            <summary>Flags used in TaskDialogConfig struct.</summary>
            <remarks>From CommCtrl.h.</remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogNotification">
            <summary>Notifications returned by Task Dialogs to the callback.</summary>
            <remarks>From CommCtrl.h.</remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.NativeMethods.TaskDialogMessages">
            <summary>Messages that can be sent to Task Dialogs.</summary>
            <remarks>From CommCtrl.h.</remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialogResult">
            <summary>
            Class that aggregates the results of a Task Dialog when closed.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialogResult.ButtonID">
            <summary>
            Gets the ID of the clicked button.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialogResult.RadioID">
            <summary>
            Gets the ID of the checked radio control.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialogResult.IsVerificationChecked">
            <summary>
            Gets whether verification was checked.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialogResult.CommonButton">
            <summary>
            Gets the clicked common button, if any.
            </summary>
            <remarks>
            Will return <see cref="F:iNKORE.UI.WinForms.Styler.TaskDialog.CommonButtonResult.None"/> if no common button was
            clicked or if a custom button with an out of range ID was clicked.
            </remarks>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog">
            <summary>
            Displays a complex dialog box that can contain text, icons, buttons, command
            links, radio buttons, and/or a progress bar.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.#ctor">
            <summary>
            Initializes a new Task Dialog instance without text.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.#ctor(System.String)">
            <summary>
            Initializes a new Task Dialog instance with text.
            </summary>
            <param name="instruction">The main instruction to display.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.#ctor(System.String,System.String)">
            <summary>
            Initializes a new Task Dialog instance with an instruction and a title.
            </summary>
            <param name="instruction">The main instruction to display.</param>
            <param name="title">The title of the Task Dialog.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new Task Dialog instance with an instruction, a title and some
            content text.</summary>
            <param name="instruction">The main instruction to display.</param>
            <param name="title">The title of the Task Dialog.</param>
            <param name="content">The content text that will be shown below the main instruction.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.#ctor(System.String,System.String,System.String,iNKORE.UI.WinForms.Styler.TaskDialog.CommonButton)">
            <summary>
            Initializes a new Task Dialog instance with an instruction, a title, some
            content text and a specific button.</summary>
            <param name="instruction">The main instruction to display.</param>
            <param name="title">The title of the Task Dialog.</param>
            <param name="content">The content text that will be shown below the main instruction.</param>
            <param name="commonButtons">Specifies one or more buttons to be displayed on the bottom of the dialog, instead of the default OK button.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.#ctor(System.String,System.String,System.String,iNKORE.UI.WinForms.Styler.TaskDialog.CommonButton,iNKORE.UI.WinForms.Styler.TaskDialog.CommonIcon)">
            <summary>
            Initializes a new Task Dialog instance with an instruction, a title, some
            content text, a specific button and an icon.</summary>
            <param name="instruction">The main instruction to display.</param>
            <param name="title">The title of the Task Dialog.</param>
            <param name="content">The content text that will be shown below the main instruction.</param>
            <param name="commonButtons">Specifies one or more buttons to be displayed on the bottom of the dialog, instead of the default OK button.</param>
            <param name="icon">The icon to display.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.IsShowing">
            <summary>
            Is true if the task dialog is currently displayed.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Title">
            <summary>
            Gets or sets the title of the dialog.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.CommonIcon">
            <summary>
            Gets or sets the icon of the dialog, from a set of common icons.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.CustomIcon">
            <summary>
            Gets or sets the icon of the dialog, from a custom Icon instance.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.CommonButtons">
            <summary>
            Gets or sets the dialog's buttons, from one or more common button types.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.CustomButtons">
            <summary>
            Gets or sets a set of custom buttons which will be displayed on the dialog.
            </summary>
            <remarks>These buttons can also be shown as Command Links optionally.</remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.DefaultButton">
            <summary>
            Gets or sets the integer ID of the dialog's default button.
            </summary>
            <remarks>
            You may use any custom ID or one of the common button IDs in
            <see cref="T:iNKORE.UI.WinForms.Styler.TaskDialog.CommonButtonResult"/>.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.RadioButtons">
            <summary>
            Gets or sets a set of custom buttons which will be displayed as radio buttons.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.EnabledRadioButton">
            <summary>
            Gets or sets the identificator of the enabled radio button by default.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.VerificationText">
            <summary>
            Gets or sets the text that will be shown next to a verification checkbox.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.ExpandedControlText">
            <summary>
            Gets or sets the text displayed on the control that enables the user to
            expand and collapse the dialog, when the dialog is in expanded mode.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.CollapsedControlText">
            <summary>
            Gets or sets the text displayed on the control that enables the user to
            expand and collapse the dialog, when the dialog is in collapsed mode.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.FooterCommonIcon">
            <summary>
            Gets or sets the icon shown in the dialog's footer, from a set of common icons.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.FooterCustomIcon">
            <summary>
            Gets or sets the icon shown in the dialog's footer, from a custom Icon instance.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Width">
            <summary>
            Explicitly sets the desired width in pixels of the dialog.
            </summary>
            <remarks>
            Will be set automatically by the task dialog to an optimal size.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Instruction">
            <summary>
            Gets or Sets the Main Instruction text of the TaskDialog.
            Can be updated when the dialog is shown.
            </summary>
            <remarks>
            Text written in blue and slightly bigger font in Windows Aero.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Content">
            <summary>
            Gets or sets the Content text of the TaskDialog.
            Can be updated when the dialog is shown.
            </summary>
            <remarks>
            Text written with standard font, right below the Main instruction.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.ExpandedInformation">
            <summary>
            Gets or Sets the expanded information text, that will be optionally shown
            by clicking on the Expand control.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Footer">
            <summary>
            Gets or Sets the Footer text.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.ProgressBarPosition">
            <summary>
            Gets or sets the current progress bar value.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.ProgressBarMinRange">
            <summary>Gets of sets the minimum value allowed by the Progress bar.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.ProgressBarMaxRange">
            <summary>Gets or sets the maximum value allowed by the Progress bar.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.ProgressBarState">
            <summary>Gets or sets the current Progress bar state.</summary>
            <remarks>Determines the bar's color and behavior.</remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.EnableHyperlinks">
            <summary>
            Enables or disables Hyperlinks in the dialog's content.
            </summary>
            <remarks>
            Hyperlinks can be expressed using HTML, in the form of &lt;A HREF="link"&gt;
            and &lt;/A&gt; tags. The link is reported back through the
            <see cref="E:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.HyperlinkClick"/> event.
            </remarks>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.AllowDialogCancellation">
            <summary>
            Gets or sets whether the dialog can be cancelled (ESC, ALT+F4 and X button)
            even if no common Cancel button has been specified.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.UseCommandLinks">
            <summary>
            Gets or sets whether Command Link buttons should be used instead of standard
            custom buttons (doesn't apply to common buttons, like OK or Cancel).
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.UseCommandLinksWithoutIcon">
            <summary>
            Gets or sets whether Command Link buttons without icon should be used instead
            of standard custom buttons (doesn't apply to common buttons, like OK or Cancel).
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.ShowExpandedInfoInFooter">
            <summary>
            Gets or sets whether the ExpandedInformation should be shown in the Footer
            area (instead of under the Content text).
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.IsExpanded">
            <summary>
            Gets or sets whether the ExpandedInformation is visible on dialog creation.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.IsVerificationChecked">
            <summary>
            Gets or sets whether the Verification checkbox should be checked when the
            dialog is shown.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.ShowProgressBar">
            <summary>
            Gets or sets whether a progress bar should be displayed on the dialog.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.EnableCallbackTimer">
            <summary>
            Sets or gets whether the user specified callback (if any) should be called every 200ms.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.PositionRelativeToWindow">
            <summary>
            Gets or sets whether the dialog should be positioned centered on the parent window.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.RightToLeftLayout">
            <summary>
            Enables or disables right to left reading order.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.NoDefaultRadioButton">
            <summary>
            Gets or sets whether there should be no selected radio button by default
            when the dialog is shown.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.CanBeMinimized">
            <summary>
            Gets or sets whether the dialog may be minimized or not.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.SimulateButtonClick(System.Int32)">
            <summary>Injects a virtual button click.</summary>
            <param name="buttonId">Numeric id of the clicked button.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.SimulateRadioButtonClick(System.Int32)">
            <summary>Injects a virtual radio button click.</summary>
            <param name="buttonId">Numeric id of the clicked radio button.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.SimulateVerificationClick(System.Boolean,System.Boolean)">
            <summary>Injects a virtual checkbox click.</summary>
            <param name="isChecked">New state of the verification checkbox.</param>
            <param name="hasKeyboardFocus">Sets whether the checkbox should have focus after state change.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.EnableButton(System.Int32,System.Boolean)">
            <summary>Enables or disables a button of the dialog.</summary>
            <param name="buttonId">Id of the button whose state will be changed.</param>
            <param name="isEnabled">New state of the button.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.EnableRadioButton(System.Int32,System.Boolean)">
            <summary>Enables or disables a radio button of the dialog.</summary>
            <param name="buttonId">Id of the radio button whose state will be changed.</param>
            <param name="isEnabled">New state of the button.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Navigate(iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog)">
            <summary>Creates a new Task Dialog setup and replaces the existing one. Note that the window will not be
            destroyed and that you should keep the existing TaskDialog reference (event handlers will still be
            registered). The existing Task Dialog will simply reset and use the options of the new one.</summary>
            <param name="nextDialog">An instance of Task Dialog, whose settings will be copied into the existing dialog.
            You may safely destroy the nextDialog instance after use (do not register to events on it).</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.SetShieldButton(System.Int32,System.Boolean)">
            <summary>Adds or removes an UAC Shield icon from a button.</summary>
            <param name="buttonId">Id of the button.</param>
            <param name="requiresElevation">Sets whether to display a Shield icon or not.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.SetMarqueeProgressBar(System.Boolean)">
            <summary>Sets whether the dialog's progress bar should be in standard or in marquee mode.</summary>
            <param name="enabled">True if the progress bar should be displayed in marquee mode (no explicit progress).</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.SetMarqueeProgressBar(System.Boolean,System.Int32)">
            <summary>Sets whether the dialog's progress bar should be in standard or in marquee mode and sets its marquee speed.</summary>
            <param name="enabled">True if the progress bar should be displayed in marquee mode (no explicit progress).</param>
            <param name="speed">Speed of the progress bar in marquee mode.</param>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Created">
            <summary>
            Occurs when the Task Dialog is first created and before it is displayed (is sent after Construction event).
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.ButtonClick">
            <summary>
            Occurs when the user clicks a button or a command link. By default the Dialog is closed after the notification.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.HyperlinkClick">
            <summary>
            Occurs when the user clicks on a Hyperlink in the Content text.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Navigating">
            <summary>
            Occurs when a navigation event is raised.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Tick">
            <summary>
            Occurs approximately every 200ms if the Task Dialog callback timer is enabled.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Destroyed">
            <summary>
            Occurs when the Task Dialog is destroyed and the handle to the dialog is not valid anymore.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.RadioButtonClick">
            <summary>
            Occurs when the user selects a radio button.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Constructed">
            <summary>
            Occurs when the Task Dialog is constructed and before it is displayed (is sent before Creation event).
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.VerificationClick">
            <summary>
            Occurs when the user switches the state of the Verification Checkbox.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Help">
            <summary>
            Occurs when the user presses F1 when the Task Dialog has focus.
            </summary>
        </member>
        <member name="E:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Expanding">
            <summary>
            Occurs when the user clicks on the expand button of the dialog, before the dialog is expanded.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.CommonCallbackProc(System.IntPtr,System.UInt32,System.UIntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Common native callback for Task Dialogs.
            Will route events to the user event handler.
            </summary>
            <param name="refData">TODO: Currently unused, would need complex marshaling of data.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.PreConfig(System.IntPtr)">
            <summary>Prepares the internal configuration structure.</summary>
            <remarks>Allocates some unmanaged memory, must always be followed by a PostConfig() call.</remarks>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.PostConfig">
            <summary>Frees the unmanages memory allocated by PreConfig().</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Show">
            <summary>Displays the task dialog without an explicit parent.</summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Show(System.IntPtr)">
            <summary>Displays the task dialog with an explicit parent window.</summary>
            <param name="owner">Handle to the dialog's parent window.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Show(System.Windows.Forms.Form)">
            <summary>Displays the task dialog with an explicit parent form.</summary>
            <param name="owner">Instance of the dialog's parent form.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Show(System.String)">
            <summary>Displays a task dialog that has a message.</summary>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Show(System.String,System.String)">
            <summary>Displays a task dialog that has a message and a title.</summary>
            <param name="text">The text to display.</param>
            <param name="title">The title bar caption of the dialog.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Show(System.String,System.String,System.String)">
            <summary>Displays a task dialog that has a message, a title, and an instruction.</summary>
            <param name="text">The text to display.</param>
            <param name="title">The title bar caption of the dialog.</param>
            <param name="instruction">The instruction shown below the main text.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Show(System.String,System.String,System.String,iNKORE.UI.WinForms.Styler.TaskDialog.CommonButton)">
            <summary>Displays a task dialog that has a message, a title, an instruction, and one or more buttons.</summary>
            <param name="text">The text to display.</param>
            <param name="title">The title bar caption of the dialog.</param>
            <param name="instruction">The instruction shown below the main text.</param>
            <param name="buttons">Value that specifies which button or buttons to display.</param>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialog.Show(System.String,System.String,System.String,iNKORE.UI.WinForms.Styler.TaskDialog.CommonButton,iNKORE.UI.WinForms.Styler.TaskDialog.CommonIcon)">
            <summary>Displays a task dialog that has a message, a title, an instruction, one or more buttons, and an icon.</summary>
            <param name="text">The text to display.</param>
            <param name="title">The title bar caption of the dialog.</param>
            <param name="instruction">The instruction shown below the main text.</param>
            <param name="buttons">Value that specifies which button or buttons to display.</param>
            <param name="icon">The icon to display.</param>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialogButton">
            <summary>Common Task Dialog buttons. OK is the default button.</summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.TaskDialog.TaskDialogIcon">
            <summary>Common Task Dialog icons. Determine the look of the main instruction.</summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.ThemeText.Options.GlowOption">
            <summary>
            Applies a glow on the themed text.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.ThemeText.Options.GlowOption.DefaultSize">
            <summary>
            Default glow size.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.ThemeText.Options.GlowOption.Word2007Size">
            <summary>
            Glow size used commonly by Office 2007 in titles.
            </summary>
        </member>
        <member name="F:iNKORE.UI.WinForms.Styler.ThemeText.Options.GlowOption.PreciseGlow">
            <summary>
            Precise glow effect.
            </summary>
        </member>
        <member name="M:iNKORE.UI.WinForms.Styler.ThemeText.Options.GlowOption.#ctor(System.Int32)">
            <summary>
            Instantiates a new glow effect for themed text.
            </summary>
            <param name="size">Size of the glow effect.</param>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.ThemeText.Options.GlowOption.Size">
            <summary>
            Gets or sets the size of the glow effect.
            </summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.ThemeText.ThemedLabel">
            <summary>
            A Label containing some text that will be drawn with glowing border on top of the Glass Sheet effect.
            </summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.ThemeText.ThemedLabel.GlowSize">
            <summary>Size of the glow effect around the text.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.ThemeText.ThemedLabel.GlowEnabled">
            <summary>Enables or disables the glow effect around the text.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.ThemeText.ThemedLabel.ShadowType">
            <summary>Shadow type.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.ThemeText.ThemedLabel.TextAlign">
            <summary>Gets or sets the horizontal text alignment setting.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.ThemeText.ThemedLabel.TextAlignVertical">
            <summary>Gets or sets the vertical text alignment setting.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.ThemeText.ThemedLabel.SingleLine">
            <summary>Gets or sets whether the text will be laid out on a single line or on multiple lines.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.ThemeText.ThemedLabel.EndEllipsis">
            <summary>Gets or sets whether the text lines over the label's border should be trimmed with an ellipsis.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.ThemeText.ThemedLabel.WordBreak">
            <summary>Gets or sets whether the text should break only at the end of a word.</summary>
        </member>
        <member name="P:iNKORE.UI.WinForms.Styler.ThemeText.ThemedLabel.WordEllipsis">
            <summary>Gets or sets whether the text should be trimmed to the last word and an ellipse should be placed at the end of the line.</summary>
        </member>
        <member name="T:iNKORE.UI.WinForms.Styler.NativeMethods">
            <summary>
            Control style and notification constants
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:AeroSuite.Controls.HotkeyBox" -->
        <member name="P:AeroSuite.Controls.HotkeyBox.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created.
            </summary>
        </member>
        <member name="P:AeroSuite.Controls.HotkeyBox.Hotkey">
            <summary>
            Gets or sets the hotkey selected in this hotkey box.
            </summary>
            <value>
            The hotkey.
            </value>
        </member>
        <member name="P:AeroSuite.Controls.HotkeyBox.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
    </members>
</doc>
